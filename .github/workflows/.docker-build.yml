name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry (true/false)'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        pg_version: [13, 14, 15, 16, 17]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.3.0

      - name: Run Makefile
        run: make
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-pg${{ matrix.pg_version }}
            type=ref,event=pr,suffix=-pg${{ matrix.pg_version }}
            type=semver,pattern={{version}}-pg${{ matrix.pg_version }}
            type=semver,pattern={{major}}.{{minor}}-pg${{ matrix.pg_version }}
            type=raw,value=pg${{ matrix.pg_version }}-latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            PG_MAJOR_VERSION=${{ matrix.pg_version }}
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event.inputs.push_images == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker image
        run: |
          echo "🧪 Testing PostgreSQL ${{ matrix.pg_version }} image..."
          # Pull the image if it was pushed, otherwise use local build
          if [ "${{ github.event_name }}" != "pull_request" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.pg_version }}-latest"
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.pg_version }}-latest"
          fi

          # Start container
          docker run -d \
            --name test-pglinter-pg${{ matrix.pg_version }} \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=pglinter_test \
            -p 543${{ matrix.pg_version }}:5432 \
            $IMAGE_TAG

          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if docker exec test-pglinter-pg${{ matrix.pg_version }} pg_isready -U postgres -d pglinter_test; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

          # Test extension functionality
          echo "Testing pglinter extension..."
          docker exec test-pglinter-pg${{ matrix.pg_version }} psql -U postgres -d pglinter_test -c "
            SELECT extname, extversion FROM pg_extension WHERE extname = 'pglinter';
            SELECT pglinter.hello_pglinter();
          "

          # Cleanup
          docker stop test-pglinter-pg${{ matrix.pg_version }}
          docker rm test-pglinter-pg${{ matrix.pg_version }}

          echo "✅ PostgreSQL ${{ matrix.pg_version }} image test completed!"

  summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| PostgreSQL Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 13 | ${{ needs.build-and-push.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 14 | ${{ needs.build-and-push.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 15 | ${{ needs.build-and-push.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 16 | ${{ needs.build-and-push.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 17 | ${{ needs.build-and-push.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "🎉 **All images built successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Available images:" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/pmpetit/pglinter:pg13-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/pmpetit/pglinter:pg14-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/pmpetit/pglinter:pg15-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/pmpetit/pglinter:pg16-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/pmpetit/pglinter:pg17-latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some builds failed.** Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi

# as main is protected, you can't commit into without a PR.
# So in main only validated PR are accepted.
# So build and test were run during the merge request process.
# So don't need to run twice the build and test workflow when releasing...
#
# Note: PGXN publishing is handled by a separate workflow (pgxn-publish.yml)
# which automatically triggers when a release is published.

name: 'Package and deploy pglinter.'

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'mkdocs.yml'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.17)'
        required: true
        type: string
      pgversions:
        description: 'PostgreSQL versions to build (comma-separated: pg13,pg14,pg15,pg16,pg17,pg18)'
        required: false
        default: 'pg17'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  ##
  ## D Y N A M I C   M A T R I X   G E N E R A T I O N
  ##
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      pgversions: ${{ steps.matrix.outputs.pgversions }}
    steps:
      - name: Generate matrix
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PGVERSIONS="${{ inputs.pgversions }}"
            echo "Using workflow_dispatch pgversions: $PGVERSIONS"
          else
            PGVERSIONS="pg13,pg14,pg15,pg16,pg17,pg18"
            echo "Using default pgversions: $PGVERSIONS"
          fi

          # Create JSON array by replacing commas and wrapping
          JSON_ARRAY=$(echo "[$PGVERSIONS]" | sed 's/,/","/g' | sed 's/\[/["/' | sed 's/\]/"]/')

          echo "Generated matrix: $JSON_ARRAY"
          echo "pgversions=$JSON_ARRAY" >> $GITHUB_OUTPUT

  ##
  ## A M D 6 4   B U I L D S   ( U S I N G   C O N T A I N E R )
  ##
  build-deb-amd64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-amd64-package-and-deploy'
    runs-on: ubuntu-latest
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-amd64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: create deb package
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          arch: amd64

  build-rpm-x86_64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-x86_64-package-and-deploy'
    runs-on: ubuntu-latest
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-amd64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: create rpm package
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          arch: amd64
          pkgtype: rpm

  test-deb-amd64-package:
    needs: [build-deb-amd64,setup-matrix]
    name: '${{ matrix.pgver }}-amd64-test-package'
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract major version
        id: extract_pgver
        run: echo "pg_version=$(echo '${{ matrix.pgver }}' | sed 's/^pg//')" >> $GITHUB_OUTPUT
      - name: Download deb package
        uses: actions/download-artifact@v4
        with:
          name: postgresql_pglinter_${{ steps.extract_pgver.outputs.pg_version }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}_amd64.deb
          path: ./artifacts
      - name: Test deb package
        uses: ./.github/actions/reusable-test-deb-package
        with:
          pg_version: ${{ steps.extract_pgver.outputs.pg_version }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: 'linux/amd64'
          timeout: '180'

  test-rpm-x86_64-package:
    needs: [build-rpm-x86_64,setup-matrix]
    name: '${{ matrix.pgver }}-x86_64-test-package'
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract major version
        id: extract_pgver
        run: echo "pg_version=$(echo '${{ matrix.pgver }}' | sed 's/^pg//')" >> $GITHUB_OUTPUT
      - name: Download rpm package
        uses: actions/download-artifact@v4
        with:
          name: postgresql_pglinter_${{ steps.extract_pgver.outputs.pg_version }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}-1.x86_64.rpm
          path: ./artifacts
      - name: Test rpm package
        uses: ./.github/actions/reusable-test-nodeb-package
        with:
          pg_version: ${{ steps.extract_pgver.outputs.pg_version }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: 'linux/amd64'
          timeout: '180'

  #
  # A R M 6 4   B U I L D S   ( D I R E C T   I N S T A L L A T I O N )
  #
  build-deb-arm64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-arm64-package-and-deploy'
    runs-on: ubuntu-24.04-arm
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-arm64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: create deb package
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.ref_name }}
          arch: arm64
          pkgtype: deb
  build-rpm-aarch64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-aarch64-package-and-deploy'
    runs-on: ubuntu-24.04-arm
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-arm64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: create rpm package
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.ref_name }}
          arch: arm64
          pkgtype: rpm

  test-deb-arm64-package:
    needs: [build-deb-arm64,setup-matrix]
    name: '${{ matrix.pgver }}-deb-arm64-test-package'
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract major version
        id: extract_pgver
        run: echo "pg_version=$(echo '${{ matrix.pgver }}' | sed 's/^pg//')" >> $GITHUB_OUTPUT
      - name: Download deb package
        uses: actions/download-artifact@v4
        with:
          name: postgresql_pglinter_${{ steps.extract_pgver.outputs.pg_version }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}_arm64.deb
          path: ./artifacts
      - name: List downloaded artifact files
        run: ls -l ./artifacts
        shell: bash
      - name: Test deb package
        uses: ./.github/actions/reusable-test-deb-package
        with:
          pg_version: ${{ steps.extract_pgver.outputs.pg_version }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: 'linux/arm64'
          timeout: '180'

  test-rpm-aarch64-package:
    needs: [build-rpm-aarch64,setup-matrix]
    name: '${{ matrix.pgver }}-rpm-aarch64-test-package'
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract major version
        id: extract_pgver
        run: echo "pg_version=$(echo '${{ matrix.pgver }}' | sed 's/^pg//')" >> $GITHUB_OUTPUT
      - name: Download rpm package
        uses: actions/download-artifact@v4
        with:
          name: postgresql_pglinter_${{ steps.extract_pgver.outputs.pg_version }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}-1.aarch64.rpm
          path: ./artifacts
      - name: List downloaded artifact files
        run: ls -l ./artifacts
        shell: bash
      - name: Test rpm package
        uses: ./.github/actions/reusable-test-nodeb-package
        with:
          pg_version: ${{ steps.extract_pgver.outputs.pg_version }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: 'linux/arm64'
          timeout: '180'

  create-release:
    needs: [test-rpm-aarch64-package, test-deb-arm64-package, test-rpm-x86_64-package, test-deb-amd64-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Release Action
        if: success()
        uses: ./.github/actions/reusable-release-action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}

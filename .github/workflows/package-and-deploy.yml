# as main is protected, you can't commit into without a PR.
# So in main only validated PR are accepted.
# So build and test were run during the merge request process.
# So don't need to run twice the build and test workflow when releasing...

name: 'Package and deploy pglinter.'

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'mkdocs.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PGLINTER_MINOR_VERSION: ${{ github.ref_name }}

jobs:
  ##
  ## B U I L D / T E S T / P A C K A G E & D E P L O Y
  ##
  build:
    strategy:
      matrix:
        pgver: [pg13,pg14,pg15,pg16,pg17,pg18]
      fail-fast: false
    name: 'package-and-deploy-pglinter-${{ github.ref_name }}-for-${{ matrix.pgver }}'
    runs-on: ubuntu-latest
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Call reusable package action
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.ref_name }}

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        merge-multiple: true

    - name: Display downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find ./artifacts -name "*.rpm" -o -name "*.deb" | sort

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: pglinter v${{ github.ref_name }}
        body: |
          ## pglinter v${{ github.ref_name }}

          PostgreSQL extension for database linting and analysis.

          ### Installation

          Download the appropriate package for your PostgreSQL version:
          - **Debian/Ubuntu**: Download the `.deb` file and install with `sudo dpkg -i pglinter-pgXX-${{ github.ref_name }}.deb`
          - **RHEL/CentOS/Fedora**: Download the `.rpm` file and install with `sudo rpm -i pglinter-pgXX-${{ github.ref_name }}.rpm`

          Replace `XX` with your PostgreSQL major version (13, 14, 15, 16, 17, 18).

          ### Usage

          ```sql
          CREATE EXTENSION pglinter;
          SELECT pglinter.perform_base_check();
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in ./artifacts/*.rpm ./artifacts/*.deb; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading $filename"
            gh release upload ${{ github.ref_name }} "$file" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

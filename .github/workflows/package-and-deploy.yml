# as main is protected, you can't commit into without a PR.
# So in main only validated PR are accepted.
# So build and test were run during the merge request process.
# So don't need to run twice the build and test workflow when releasing...
#
# Note: PGXN publishing is handled by a separate workflow (pgxn-publish.yml)
# which automatically triggers when a release is published.

name: 'Package and deploy pglinter.'

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'mkdocs.yml'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.17)'
        required: true
        type: string
      pgversions:
        description: 'PostgreSQL versions to build (comma-separated: pg13,pg14,pg15,pg16,pg17,pg18)'
        required: false
        default: 'pg13,pg14,pg15,pg16,pg17,pg18'
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PGLINTER_MINOR_VERSION: ${{ github.ref_name }}

jobs:

  ##
  ## D Y N A M I C   M A T R I X   G E N E R A T I O N
  ##
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      pgversions: ${{ steps.matrix.outputs.pgversions }}
    steps:
      - name: Generate matrix
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PGVERSIONS="${{ inputs.pgversions }}"
            echo "Using workflow_dispatch pgversions: $PGVERSIONS"
          else
            PGVERSIONS="pg13,pg14,pg15,pg16,pg17,pg18"
            echo "Using default pgversions: $PGVERSIONS"
          fi

          # Create JSON array by replacing commas and wrapping
          JSON_ARRAY=$(echo "[$PGVERSIONS]" | sed 's/,/","/g' | sed 's/\[/["/' | sed 's/\]/"]/')

          echo "Generated matrix: $JSON_ARRAY"
          echo "pgversions=$JSON_ARRAY" >> $GITHUB_OUTPUT

  ##
  ## A M D 6 4   B U I L D S   ( U S I N G   C O N T A I N E R )
  ##
  build-amd64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: 'package-and-deploy-pglinter-${{ github.ref_name }}-for-${{ matrix.pgver }}'
    runs-on: ubuntu-latest
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-amd64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Call reusable package action
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.ref_name }}
          arch: amd64

  ##
  ## A R M 6 4   B U I L D S   ( D I R E C T   I N S T A L L A T I O N )
  ##
  build-arm64:
    needs: setup-matrix
    strategy:
      matrix:
        pgver: ${{ fromJSON(needs.setup-matrix.outputs.pgversions) }}
      fail-fast: false
    name: 'package-and-deploy-pglinter-${{ github.ref_name }}-for-${{ matrix.pgver }}'
    runs-on: ubuntu-24.04-arm
    # Use GitHub Container Registry for pmpetit
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-arm64
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Call reusable package action
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.ref_name }}
          arch: arm64


  ##
  ## T E S T   P A C K A G E   I N S T A L L A T I O N
  ##
  test-packages:
    needs: [build-amd64, build-arm64]
    strategy:
      matrix:
        include:
          # AMD64 tests
          - os: ubuntu-latest
            arch: amd64
            pgver: pg17  # Test with one version for validation
            package_type: deb
          - os: ubuntu-latest
            arch: amd64
            pgver: pg17
            package_type: rpm
          # ARM64 tests
          - os: ubuntu-24.04-arm
            arch: arm64
            pgver: pg17
            package_type: deb
          - os: ubuntu-24.04-arm
            arch: arm64
            pgver: pg17
            package_type: rpm
      fail-fast: false

    name: 'test-install-${{ matrix.package_type }}-${{ matrix.pgver }}-${{ matrix.arch }}'
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set architecture variables
        id: setup-arch
        run: |
          case "${{ matrix.arch }}" in
            "amd64")
              echo "RPM_ARCH=x86_64" >> $GITHUB_OUTPUT
              echo "DEB_ARCH=amd64" >> $GITHUB_OUTPUT
              ;;
            "arm64")
              echo "RPM_ARCH=aarch64" >> $GITHUB_OUTPUT
              echo "DEB_ARCH=arm64" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown architecture: ${{ matrix.arch }}"
              exit 1
              ;;
          esac

      - name: Download packages from build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "pglinter-${{ matrix.pgver }}-*"
          merge-multiple: true
          path: ./packages

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./packages -type f | sort
          echo ""
          echo "Looking for ${{ matrix.package_type }} package for ${{ matrix.arch }}"

      
  create-release:
    needs: [test-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Release with Artifacts
        uses: ./.github/actions/reusable-release-action
        with:
          tag: ${{ github.ref_name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false

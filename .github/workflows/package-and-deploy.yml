# as main is protected, you can't commit into without a PR.
# So in main only validated PR are accepted.
# So build and test were run during the merge request process.
# So don't need to run twice the build and test workflow when releasing...
#
# Note: PGXN publishing is handled by a separate workflow (pgxn-publish.yml)
# which automatically triggers when a release is published.

name: 'Package and deploy pglinter.'

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'mkdocs.yml'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.17)'
        required: true
        type: string
      pgversions:
        description: 'PostgreSQL versions to build (comma-separated: pg13,pg14,pg15,pg16,pg17,pg18)'
        required: false
        default: 'pg17'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  ##
  ## D Y N A M I C   M A T R I X   G E N E R A T I O N
  ##
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      pgversions: ${{ steps.matrix.outputs.pgversions }}
      runs_on: ${{ steps.matrix.outputs.runs_on }}
      arch: ${{ steps.matrix.outputs.arch }}
      pkgtype: ${{ steps.matrix.outputs.pkgtype }}
      matrix_include: ${{ steps.matrix.outputs.matrix_include }}
    steps:
      - name: Generate matrix
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PGVERSIONS="${{ inputs.pgversions }}"
            echo "Using workflow_dispatch pgversions: $PGVERSIONS"
          else
            PGVERSIONS="pg13,pg14,pg15,pg16,pg17,pg18"
            echo "Using default pgversions: $PGVERSIONS"
          fi


          # Create JSON array of objects for matrix.include
          MATRIX_JSON="["
          for PG in $(echo $PGVERSIONS | tr ',' ' '); do
            MATRIX_JSON+="{\"pgver\": \"$PG\", \"arch\": \"amd64\", \"runs_on\": \"ubuntu-latest\", \"pkgtype\": \"deb\"},"
            MATRIX_JSON+="{\"pgver\": \"$PG\", \"arch\": \"amd64\", \"runs_on\": \"ubuntu-latest\", \"pkgtype\": \"rpm\"},"
            MATRIX_JSON+="{\"pgver\": \"$PG\", \"arch\": \"arm64\", \"runs_on\": \"ubuntu-24.04-arm\", \"pkgtype\": \"deb\"},"
            MATRIX_JSON+="{\"pgver\": \"$PG\", \"arch\": \"arm64\", \"runs_on\": \"ubuntu-24.04-arm\", \"pkgtype\": \"rpm\"},"
          done
          # Remove trailing comma and close array
          MATRIX_JSON=${MATRIX_JSON%,}
          MATRIX_JSON+="]"

          echo "matrix_include=$MATRIX_JSON" >> $GITHUB_OUTPUT



  build-package:
    needs: setup-matrix
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup-matrix.outputs.matrix_include) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-${{ matrix.arch }}-${{ matrix.pkgtype }}-package-build'
    runs-on: ${{ matrix.runs_on }}
    container:
      image: ghcr.io/pmpetit/postgresql_pglinter:pgrx-${{ matrix.arch }}
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: create package
        uses: ./.github/actions/reusable-package-action
        with:
          pgver: ${{ matrix.pgver }}
          tag: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          arch: ${{ matrix.arch }}
          pkgtype: ${{ matrix.pkgtype }}
      # - name: Extract major version
      #   id: extract_pgver
      #   run: echo "pg_version=$(echo '${{ matrix.pgver }}' | sed 's/^pg//')" >> $GITHUB_OUTPUT
      # - name: Upload package artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.pkgtype == 'deb' && format('postgresql_pglinter_{0}-{1}_{2}.deb', steps.extract_pgver.outputs.pg_version, github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name, matrix.arch) || format('postgresql_pglinter_{0}-{1}-1.{2}.rpm', steps.extract_pgver.outputs.pg_version, github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name, matrix.arch == 'amd64' && 'x86_64' || 'aarch64') }}
      #     path: ./artifacts

  test-package:
    needs:
      - setup-matrix
      - build-package
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup-matrix.outputs.matrix_include) }}
      fail-fast: false
    name: '${{ matrix.pgver }}-${{ matrix.arch }}-${{ matrix.pkgtype }}-package-test'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Test deb package
        if: ${{ matrix.pkgtype == 'deb' }}
        uses: ./.github/actions/reusable-test-deb-package
        with:
          pg_version: ${{ matrix.pgver }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: ${{ matrix.arch == 'amd64' && 'linux/amd64' || 'linux/arm64' }}
          timeout: '180'
          artifact_name: postgresql_pglinter_${{ matrix.pgver }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}_${{ matrix.arch }}.deb
      - name: Test rpm package
        if: ${{ matrix.pkgtype == 'rpm' }}
        uses: ./.github/actions/reusable-test-nodeb-package
        with:
          pg_version: ${{ matrix.pgver }}
          pglinter_version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          platform: ${{ matrix.arch == 'amd64' && 'linux/amd64' || 'linux/arm64' }}
          timeout: '180'
          artifact_name: postgresql_pglinter_${{ matrix.pgver }}-${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}_${{ matrix.arch }}.rpm

  create-release:
    needs: test-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Release Action
        if: success()
        uses: ./.github/actions/reusable-release-action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}

name: PR Pre-commit Guard

# This workflow BLOCKS merging if pre-commit checks fail
on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

# Ensure only one workflow runs at a time per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  enforce-precommit:
    name: 🛡️ Enforce Pre-commit Checks
    runs-on: ubuntu-latest

    # Skip draft PRs to allow work in progress
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.3.0
        with:
          # Fetch enough history for pre-commit to work properly
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          components: rustfmt, clippy
          cache: true

      - name: Set up Python
        uses: actions/setup-python@v4.8.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js for markdownlint
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install pre-commit codespell

          # Install markdownlint
          npm install -g markdownlint-cli

      - name: Cache pre-commit
        uses: actions/cache@v3.3.3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: 🔍 Run pre-commit hooks
        run: |
          echo "🔍 Running pre-commit hooks on all files..."
          pre-commit run --all-files --show-diff-on-failure

      - name: 🎨 Check Rust code formatting
        run: |
          echo "🎨 Checking Rust code formatting..."
          cargo fmt --all -- --check

      - name: 📎 Run Rust linting (Clippy)
        run: |
          echo "📎 Running Rust linting with Clippy..."
          cargo clippy --no-default-features --features pg13 --all-targets -- -D warnings

      - name: 📚 Lint documentation
        run: |
          echo "📚 Linting Markdown documentation..."
          make lint-docs

      - name: ✅ All pre-commit checks passed
        run: |
          echo "🎉 All pre-commit checks passed successfully!"
          echo "✅ Code formatting is correct"
          echo "✅ No linting issues found"
          echo "✅ Documentation is properly formatted"
          echo ""
          echo "This PR is ready for review! 🚀"

      - name: 💬 Comment on PR (success)
        if: success()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const comment = `## ✅ Pre-commit Checks Passed!

            All pre-commit checks have passed successfully:

            - ✅ Code formatting (rustfmt)
            - ✅ Code linting (clippy)
            - ✅ Documentation linting
            - ✅ Pre-commit hooks

            This PR is ready for review! 🚀`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Pre-commit Checks')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: 💬 Comment on PR (failure)
        if: failure()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const comment = `## ❌ Pre-commit Checks Failed!

            Some pre-commit checks have failed. Please fix the issues and push again:

            ### To fix locally:

            1. **Install pre-commit hook** (one-time setup):
               \`\`\`bash
               make install-precommit-hook
               \`\`\`

            2. **Run pre-commit checks manually**:
               \`\`\`bash
               make precommit-fast  # Fast checks (no tests)
               # or
               make precommit       # Full checks with tests
               \`\`\`

            3. **Fix any issues** and commit again

            ### Common fixes:
            - **Formatting**: Run \`cargo fmt\`
            - **Linting**: Fix issues shown by \`cargo clippy\`
            - **Documentation**: Fix markdown issues

            The pre-commit hook will automatically run these checks on future commits! 🔧`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Pre-commit Checks')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment
              });
            }

name: Pre-commit Checks

on:
  # Run on pull requests targeting main
  pull_request:
    branches: [ main ]

  # Allow manual runs
  workflow_dispatch:

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        postgres-version: [13, 14, 15, 16]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          components: rustfmt, clippy
          cache: true

      - name: Install pgrx and dependencies
        run: |
          # Install pgrx
          cargo install --locked cargo-pgrx

          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libreadline-dev \
            zlib1g-dev \
            flex \
            bison \
            libxml2-dev \
            libxslt-dev \
            libssl-dev \
            libxml2-utils \
            xsltproc \
            ccache

      - name: Initialize pgrx for PostgreSQL ${{ matrix.postgres-version }}
        run: |
          cargo pgrx init --pg${{ matrix.postgres-version }} download

      - name: Install Python dependencies for pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit codespell

      - name: Install additional tools
        run: |
          # Install markdownlint
          sudo npm install -g markdownlint-cli

      - name: Cache pre-commit
        uses: actions/cache@v3.3.3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

      - name: Check Rust formatting
        run: |
          cargo fmt --all -- --check

      - name: Run Rust linting (Clippy)
        run: |
          cargo clippy --no-default-features --features pg13 --all-targets -- -D warnings

      - name: Build extension
        run: |
          make extension

      - name: Run Rust tests
        run: |
          cargo pgrx test pg${{ matrix.postgres-version }}

      - name: Run integration tests (PostgreSQL ${{ matrix.postgres-version }})
        run: |
          # Start PostgreSQL instance
          cargo pgrx start pg${{ matrix.postgres-version }}

          # Install extension
          cargo pgrx install --pg-config ~/.pgrx/${{ matrix.postgres-version }}.*/pgrx-install/bin/pg_config

          # Run make test targets
          PGVER=pg${{ matrix.postgres-version }} make test-all
        continue-on-error: false

  # Job that runs the fast pre-commit checks for quick feedback
  fast-checks:
    name: Fast Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.3.0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          components: rustfmt, clippy
          cache: true

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit codespell

      - name: Install markdownlint
        run: |
          sudo npm install -g markdownlint-cli

      - name: Cache pre-commit
        uses: actions/cache@v3.3.3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run fast pre-commit checks
        run: |
          # Run formatting and linting without tests
          make precommit-fast

  # Enforce that all checks pass before allowing merge
  check-success:
    name: All Checks Passed
    needs: [pre-commit, fast-checks]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.pre-commit.result }}" != "success" ]] || [[ "${{ needs.fast-checks.result }}" != "success" ]]; then
            echo "One or more pre-commit checks failed"
            exit 1
          fi
          echo "âœ… All pre-commit checks passed successfully!"

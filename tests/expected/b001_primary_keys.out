-- Simple example to demonstrate database-wide primary key analysis and B001 rule detection
-- This script creates multiple tables with and without primary keys to test the B001 percentage-based rule
BEGIN;
-- Clean up any existing test tables
DROP TABLE IF EXISTS orders_no_pk CASCADE;
NOTICE:  table "orders_no_pk" does not exist, skipping
DROP TABLE IF EXISTS customers_no_pk CASCADE;
NOTICE:  table "customers_no_pk" does not exist, skipping
DROP TABLE IF EXISTS products_no_pk CASCADE;
NOTICE:  table "products_no_pk" does not exist, skipping
DROP TABLE IF EXISTS reviews_no_pk CASCADE;
NOTICE:  table "reviews_no_pk" does not exist, skipping
DROP TABLE IF EXISTS inventory_no_pk CASCADE;
NOTICE:  table "inventory_no_pk" does not exist, skipping
DROP TABLE IF EXISTS shipments_no_pk CASCADE;
NOTICE:  table "shipments_no_pk" does not exist, skipping
DROP TABLE IF EXISTS payments_no_pk CASCADE;
NOTICE:  table "payments_no_pk" does not exist, skipping
DROP TABLE IF EXISTS categories_with_pk CASCADE;
NOTICE:  table "categories_with_pk" does not exist, skipping
DROP TABLE IF EXISTS users_with_pk CASCADE;
NOTICE:  table "users_with_pk" does not exist, skipping
DROP TABLE IF EXISTS settings_with_pk CASCADE;
NOTICE:  table "settings_with_pk" does not exist, skipping
-- Create tables WITHOUT primary keys to trigger B001 rule (need enough to exceed 20% threshold)
-- These tables will contribute to the "tables without primary key" count
CREATE TABLE orders_no_pk (
    order_id INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    order_date DATE NOT NULL DEFAULT CURRENT_DATE,
    quantity INTEGER DEFAULT 1,
    total_amount DECIMAL(10,2),
    status VARCHAR(20) DEFAULT 'pending'
);
CREATE TABLE customers_no_pk (
    customer_id INTEGER NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    address TEXT,
    city VARCHAR(50),
    state VARCHAR(20),
    zip_code VARCHAR(10)
);
CREATE TABLE products_no_pk (
    product_id INTEGER NOT NULL,
    product_name VARCHAR(100) NOT NULL,
    description TEXT,
    category_id INTEGER,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE
);
CREATE TABLE reviews_no_pk (
    review_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    review_date DATE DEFAULT CURRENT_DATE,
    helpful_votes INTEGER DEFAULT 0
);
CREATE TABLE inventory_no_pk (
    inventory_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    warehouse_location VARCHAR(50),
    quantity_on_hand INTEGER DEFAULT 0,
    quantity_reserved INTEGER DEFAULT 0,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE shipments_no_pk (
    shipment_id INTEGER NOT NULL,
    order_id INTEGER NOT NULL,
    tracking_number VARCHAR(100),
    carrier VARCHAR(50),
    shipped_date DATE,
    estimated_delivery DATE,
    actual_delivery DATE,
    shipment_status VARCHAR(20) DEFAULT 'pending'
);
CREATE TABLE payments_no_pk (
    payment_id INTEGER NOT NULL,
    order_id INTEGER NOT NULL,
    payment_method VARCHAR(20) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    transaction_reference VARCHAR(100),
    payment_status VARCHAR(20) DEFAULT 'pending'
);
-- Create some tables WITH primary keys (these will NOT contribute to the problem)
CREATE TABLE categories_with_pk (
    id SERIAL PRIMARY KEY,
    category_name VARCHAR(50) NOT NULL,
    description TEXT,
    parent_category_id INTEGER,
    is_active BOOLEAN DEFAULT TRUE
);
CREATE TABLE users_with_pk (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP
);
CREATE TABLE settings_with_pk (
    id SERIAL PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE
);
-- Insert some test data to make tables more realistic
INSERT INTO orders_no_pk (order_id, customer_id, product_id, quantity, total_amount, status) VALUES
    (1001, 1, 101, 2, 59.98, 'completed'),
    (1002, 2, 102, 1, 29.99, 'pending'),
    (1003, 1, 103, 3, 89.97, 'shipped');
INSERT INTO customers_no_pk (customer_id, first_name, last_name, email, phone) VALUES
    (1, 'John', 'Doe', 'john.doe@example.com', '555-0101'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com', '555-0102'),
    (3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-0103');
INSERT INTO products_no_pk (product_id, product_name, description, category_id, price, stock_quantity) VALUES
    (101, 'Laptop Computer', 'High-performance laptop', 1, 899.99, 50),
    (102, 'Wireless Mouse', 'Ergonomic wireless mouse', 2, 24.99, 100),
    (103, 'Keyboard', 'Mechanical keyboard', 2, 79.99, 75);
INSERT INTO categories_with_pk (category_name, description) VALUES
    ('Electronics', 'Electronic devices and accessories'),
    ('Computers', 'Computer hardware and peripherals'),
    ('Office Supplies', 'General office equipment');
INSERT INTO users_with_pk (username, email, password_hash) VALUES
    ('admin', 'admin@example.com', 'hashed_password_1'),
    ('user1', 'user1@example.com', 'hashed_password_2'),
    ('user2', 'user2@example.com', 'hashed_password_3');
-- Update table statistics
ANALYZE orders_no_pk;
ANALYZE customers_no_pk;
ANALYZE products_no_pk;
ANALYZE reviews_no_pk;
ANALYZE inventory_no_pk;
ANALYZE shipments_no_pk;
ANALYZE payments_no_pk;
ANALYZE categories_with_pk;
ANALYZE users_with_pk;
ANALYZE settings_with_pk;
-- Create the extension and test B001 rule
DROP EXTENSION IF EXISTS pglinter CASCADE;
NOTICE:  extension "pglinter" does not exist, skipping
CREATE EXTENSION IF NOT EXISTS pglinter;
-- Show current table count and primary key analysis
SELECT 'Database-wide primary key analysis:' as info;
                info                 
-------------------------------------
 Database-wide primary key analysis:
(1 row)

SELECT
    COUNT(*) as total_tables,
    COUNT(*) FILTER (WHERE EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        WHERE tc.table_schema = t.table_schema
        AND tc.table_name = t.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    )) as tables_with_pk,
    COUNT(*) FILTER (WHERE NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        WHERE tc.table_schema = t.table_schema
        AND tc.table_name = t.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    )) as tables_without_pk,
    ROUND(
        COUNT(*) FILTER (WHERE NOT EXISTS (
            SELECT 1 FROM information_schema.table_constraints tc
            WHERE tc.table_schema = t.table_schema
            AND tc.table_name = t.table_name
            AND tc.constraint_type = 'PRIMARY KEY'
        )) * 100.0 / COUNT(*), 1
    ) as percentage_without_pk
FROM information_schema.tables t
WHERE t.table_schema = 'public'
AND t.table_type = 'BASE TABLE'
AND t.table_name IN (
    'orders_no_pk', 'customers_no_pk', 'products_no_pk', 'reviews_no_pk',
    'inventory_no_pk', 'shipments_no_pk', 'payments_no_pk',
    'categories_with_pk', 'users_with_pk', 'settings_with_pk'
);
 total_tables | tables_with_pk | tables_without_pk | percentage_without_pk 
--------------+----------------+-------------------+-----------------------
           10 |              3 |                 7 |                  70.0
(1 row)

SELECT 'Testing B001 rule - Database-wide primary key percentage analysis...' as test_info;
                              test_info                               
----------------------------------------------------------------------
 Testing B001 rule - Database-wide primary key percentage analysis...
(1 row)

-- First, disable all rules to isolate B001 testing
SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  🔴 Disabled 22 rule(s)
 all_rules_disabled 
--------------------
                 22
(1 row)

-- Enable only B001 for focused testing
SELECT pglinter.enable_rule('B001') AS b001_enabled;
NOTICE:  ✅ Rule B001 has been enabled
 b001_enabled 
--------------
 t
(1 row)

-- Verify B001 is enabled
SELECT pglinter.is_rule_enabled('B001') AS b001_status;
 b001_status 
-------------
 t
(1 row)

-- Run base check to detect database-wide primary key percentage issues
SELECT 'Running base check to detect B001 violations...' as status;
                     status                      
-------------------------------------------------
 Running base check to detect B001 violations...
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B001] WARNING: 7 tables without primary key exceed the warning threshold: 20%
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_base_check 
--------------------
 t
(1 row)

-- Show rule explanation
SELECT pglinter.explain_rule('B001');
NOTICE:  📖 Rule Explanation for B001
============================================================

🎯 Rule Name: HowManyTableWithoutPrimaryKey
📋 Scope: BASE

📝 Description:
Count number of tables without primary key.

⚠️  Message Template:
{0} table without primary key exceed the warning threshold: {1}%.

🔧 How to Fix:
   1. create a primary key or change warning/error threshold
============================================================
 explain_rule 
--------------
 t
(1 row)

-- Test rule management for B001
SELECT 'Testing B001 rule management...' as test_section;
          test_section           
---------------------------------
 Testing B001 rule management...
(1 row)

-- Disable B001 temporarily
SELECT pglinter.disable_rule('B001') AS b001_disabled;
NOTICE:  🔴 Rule B001 has been disabled
 b001_disabled 
---------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('B001') AS b001_status_after_disable;
 b001_status_after_disable 
---------------------------
 f
(1 row)

-- Run base check again (should skip B001)
SELECT 'Running base check with B001 disabled (should find no B001 violations)...' as status;
                                  status                                   
---------------------------------------------------------------------------
 Running base check with B001 disabled (should find no B001 violations)...
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  ✅ No issues found - database schema looks good!
 perform_base_check 
--------------------
 t
(1 row)

-- Re-enable B001
SELECT pglinter.enable_rule('B001') AS b001_reenabled;
NOTICE:  ✅ Rule B001 has been enabled
 b001_reenabled 
----------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('B001') AS b001_status_after_enable;
 b001_status_after_enable 
--------------------------
 t
(1 row)

-- Run base check again (should detect B001 violations)
SELECT 'Running base check with B001 re-enabled...' as status;
                   status                   
--------------------------------------------
 Running base check with B001 re-enabled...
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B001] WARNING: 7 tables without primary key exceed the warning threshold: 20%
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_base_check 
--------------------
 t
(1 row)

-- Now let's fix some of the issues by adding primary keys to reduce the percentage
SELECT 'Adding primary keys to some tables to improve the percentage...' as improvement_info;
                        improvement_info                         
-----------------------------------------------------------------
 Adding primary keys to some tables to improve the percentage...
(1 row)

-- Add primary keys to reduce the percentage below the 20% threshold
ALTER TABLE orders_no_pk ADD CONSTRAINT pk_orders PRIMARY KEY (order_id);
ALTER TABLE customers_no_pk ADD CONSTRAINT pk_customers PRIMARY KEY (customer_id);
ALTER TABLE products_no_pk ADD CONSTRAINT pk_products PRIMARY KEY (product_id);
ALTER TABLE reviews_no_pk ADD CONSTRAINT pk_reviews PRIMARY KEY (review_id);
ALTER TABLE inventory_no_pk ADD CONSTRAINT pk_inventory PRIMARY KEY (inventory_id);
-- Keep 2 tables without primary keys to maintain some violations but below threshold
-- shipments_no_pk and payments_no_pk will remain without primary keys
-- Verify new primary key status
SELECT 'Database-wide primary key analysis after improvements:' as info;
                          info                          
--------------------------------------------------------
 Database-wide primary key analysis after improvements:
(1 row)

SELECT
    COUNT(*) as total_tables,
    COUNT(*) FILTER (WHERE EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        WHERE tc.table_schema = t.table_schema
        AND tc.table_name = t.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    )) as tables_with_pk,
    COUNT(*) FILTER (WHERE NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        WHERE tc.table_schema = t.table_schema
        AND tc.table_name = t.table_name
        AND tc.constraint_type = 'PRIMARY KEY'
    )) as tables_without_pk,
    ROUND(
        COUNT(*) FILTER (WHERE NOT EXISTS (
            SELECT 1 FROM information_schema.table_constraints tc
            WHERE tc.table_schema = t.table_schema
            AND tc.table_name = t.table_name
            AND tc.constraint_type = 'PRIMARY KEY'
        )) * 100.0 / COUNT(*), 1
    ) as percentage_without_pk
FROM information_schema.tables t
WHERE t.table_schema = 'public'
AND t.table_type = 'BASE TABLE'
AND t.table_name IN (
    'orders_no_pk', 'customers_no_pk', 'products_no_pk', 'reviews_no_pk',
    'inventory_no_pk', 'shipments_no_pk', 'payments_no_pk',
    'categories_with_pk', 'users_with_pk', 'settings_with_pk'
);
 total_tables | tables_with_pk | tables_without_pk | percentage_without_pk 
--------------+----------------+-------------------+-----------------------
           10 |              8 |                 2 |                  20.0
(1 row)

-- Run B001 check again (should show reduced violations or no violations)
SELECT 'Running B001 check after adding primary keys (should show improved percentage):' as test_info;
                                    test_info                                    
---------------------------------------------------------------------------------
 Running B001 check after adding primary keys (should show improved percentage):
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  ✅ No issues found - database schema looks good!
 perform_base_check 
--------------------
 t
(1 row)

-- Test comparison between B001 (base rule) and T001 (table rule)
SELECT 'Demonstrating difference between B001 (base) and T001 (table) rules:' as comparison_info;
                           comparison_info                            
----------------------------------------------------------------------
 Demonstrating difference between B001 (base) and T001 (table) rules:
(1 row)

-- Enable T001 to show the difference
SELECT pglinter.enable_rule('T001') AS t001_enabled;
NOTICE:  ✅ Rule T001 has been enabled
 t001_enabled 
--------------
 t
(1 row)

SELECT 'B001 (base check) - Shows percentage-based violation:' as b001_demo;
                       b001_demo                       
-------------------------------------------------------
 B001 (base check) - Shows percentage-based violation:
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  ✅ No issues found - database schema looks good!
 perform_base_check 
--------------------
 t
(1 row)

SELECT 'T001 (table check) - Shows individual tables without primary keys:' as t001_demo;
                             t001_demo                              
--------------------------------------------------------------------
 T001 (table check) - Shows individual tables without primary keys:
(1 row)

SELECT pglinter.perform_table_check();
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [T001] WARNING: Found 2 tables without primary key: public.shipments_no_pk, public.payments_no_pk
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Test with a comprehensive check to see all rules
SELECT 'Testing comprehensive check to see both B001 and T001:' as comprehensive_test;
                   comprehensive_test                   
--------------------------------------------------------
 Testing comprehensive check to see both B001 and T001:
(1 row)

SELECT pglinter.enable_all_rules() AS all_rules_enabled;
NOTICE:  ✅ Enabled 20 rule(s)
 all_rules_enabled 
-------------------
                20
(1 row)

SELECT pglinter.check_all();
NOTICE:  🔍 Running comprehensive pglinter check...
NOTICE:  
NOTICE:  📋 BASE CHECKS:
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B004] WARNING: Found 12 potentially unused indexes
NOTICE:  ❌ [B005] ERROR: Public schema allows CREATE privilege for all users - security risk
NOTICE:  ==================================================
NOTICE:  📊 Summary: 1 error(s), 1 warning(s), 0 info
NOTICE:  🔴 Critical issues found - please review and fix errors
NOTICE:  
NOTICE:  🖥️  CLUSTER CHECKS:
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ℹ️  [C002] INFO: Please manually check pg_hba.conf for insecure trust/password methods
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 0 warning(s), 1 info
NOTICE:  🟢 Only informational messages - good job!
NOTICE:  
NOTICE:  📊 TABLE CHECKS:
NOTICE:  🔍 pglinter found 4 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [T001] WARNING: Found 2 tables without primary key: public.shipments_no_pk, public.payments_no_pk
NOTICE:  ⚠️  [T002] WARNING: Found 2 tables without any index: public.shipments_no_pk, public.payments_no_pk
NOTICE:  ⚠️  [T009] WARNING: Found 1 tables without role grants: pglinter.rules
NOTICE:  ℹ️  [T012] INFO: Anon extension not found. Install postgresql-anonymizer to detect sensitive columns
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 3 warning(s), 1 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
NOTICE:  
NOTICE:  🗂️  SCHEMA CHECKS:
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [S001] WARNING: Found 1 schemas without default role grants: tests
NOTICE:  ⚠️  [S002] WARNING: Found 1 schemas with environment prefixes/suffixes: tests
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 2 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
NOTICE:  
NOTICE:  🎉 All pglinter checks completed successfully!
 check_all 
-----------
 t
(1 row)

-- Educational summary
SELECT 'Summary and Key Differences:' as info;
             info             
------------------------------
 Summary and Key Differences:
(1 row)

SELECT '
This example demonstrates the B001 rule which detects database-wide primary key issues.

Key Points about B001:
1. B001 is a BASE-level rule (database-wide analysis)
2. Uses percentage threshold (default: 20%)
3. Triggers when >20% of tables lack primary keys
4. Part of perform_base_check() function
5. Focuses on overall database health metrics

Key Differences B001 vs T001:
- B001: "X tables without primary key exceed the warning threshold: 20%"
- T001: "Found X tables without primary key: schema.table1, schema.table2..."

- B001: Database-wide percentage analysis
- T001: Individual table identification

- B001: Part of base checks (perform_base_check)
- T001: Part of table checks (perform_table_check)

- B001: Useful for monitoring overall database design quality
- T001: Useful for identifying specific tables that need primary keys

Why Both Rules Matter:
- B001 helps DBAs understand overall database design quality
- T001 helps developers know exactly which tables to fix
- Together they provide comprehensive primary key analysis

The B001 rule is particularly useful for:
- Database health monitoring
- Migration planning
- Design quality assessments
- Setting up alerts for design degradation
' as explanation;
                                       explanation                                       
-----------------------------------------------------------------------------------------
                                                                                        +
 This example demonstrates the B001 rule which detects database-wide primary key issues.+
                                                                                        +
 Key Points about B001:                                                                 +
 1. B001 is a BASE-level rule (database-wide analysis)                                  +
 2. Uses percentage threshold (default: 20%)                                            +
 3. Triggers when >20% of tables lack primary keys                                      +
 4. Part of perform_base_check() function                                               +
 5. Focuses on overall database health metrics                                          +
                                                                                        +
 Key Differences B001 vs T001:                                                          +
 - B001: "X tables without primary key exceed the warning threshold: 20%"               +
 - T001: "Found X tables without primary key: schema.table1, schema.table2..."          +
                                                                                        +
 - B001: Database-wide percentage analysis                                              +
 - T001: Individual table identification                                                +
                                                                                        +
 - B001: Part of base checks (perform_base_check)                                       +
 - T001: Part of table checks (perform_table_check)                                     +
                                                                                        +
 - B001: Useful for monitoring overall database design quality                          +
 - T001: Useful for identifying specific tables that need primary keys                  +
                                                                                        +
 Why Both Rules Matter:                                                                 +
 - B001 helps DBAs understand overall database design quality                           +
 - T001 helps developers know exactly which tables to fix                               +
 - Together they provide comprehensive primary key analysis                             +
                                                                                        +
 The B001 rule is particularly useful for:                                              +
 - Database health monitoring                                                           +
 - Migration planning                                                                   +
 - Design quality assessments                                                           +
 - Setting up alerts for design degradation                                             +
 
(1 row)

-- Clean up test tables
DROP TABLE IF EXISTS orders_no_pk CASCADE;
DROP TABLE IF EXISTS customers_no_pk CASCADE;
DROP TABLE IF EXISTS products_no_pk CASCADE;
DROP TABLE IF EXISTS reviews_no_pk CASCADE;
DROP TABLE IF EXISTS inventory_no_pk CASCADE;
DROP TABLE IF EXISTS shipments_no_pk CASCADE;
DROP TABLE IF EXISTS payments_no_pk CASCADE;
DROP TABLE IF EXISTS categories_with_pk CASCADE;
DROP TABLE IF EXISTS users_with_pk CASCADE;
DROP TABLE IF EXISTS settings_with_pk CASCADE;
ROLLBACK;

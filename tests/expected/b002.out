-- Test for pg_linter B002 rule: Redundant indexes
BEGIN;
-- Create test tables with redundant indexes
CREATE TABLE IF NOT EXISTS test_table_with_redundant_indexes (
    id INT PRIMARY KEY,
    name TEXT,
    email VARCHAR(255),
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);
-- Create another table for more redundant index scenarios
CREATE TABLE IF NOT EXISTS orders_table (
    order_id SERIAL PRIMARY KEY,
    customer_id INT,
    product_name VARCHAR(255),
    order_date DATE,
    amount DECIMAL(10,2)
);
-- Create redundant indexes to trigger B002 rule
-- Case 1: Exact duplicate indexes on same columns
CREATE INDEX idx_name_1 ON test_table_with_redundant_indexes (name);
CREATE INDEX idx_name_2 ON test_table_with_redundant_indexes (name);
-- Case 2: Multiple indexes on same composite key
CREATE INDEX idx_email_status_1 ON test_table_with_redundant_indexes (email, status);
CREATE INDEX idx_email_status_2 ON test_table_with_redundant_indexes (email, status);
-- Case 3: Redundant indexes on the orders table
CREATE INDEX idx_customer_1 ON orders_table (customer_id);
CREATE INDEX idx_customer_2 ON orders_table (customer_id);
-- Case 4: Composite index redundancy
CREATE INDEX idx_customer_date_1 ON orders_table (customer_id, order_date);
CREATE INDEX idx_customer_date_2 ON orders_table (customer_id, order_date);
CREATE EXTENSION IF NOT EXISTS pg_linter;
-- Test with file output
SELECT pg_linter.perform_base_check('/tmp/pg_linter_b002_results.sarif');
 perform_base_check 
--------------------
 t
(1 row)

-- Test if file exists and show checksum
\! md5sum /tmp/pg_linter_b002_results.sarif
1f490c6cc56a91f032fee9da0c0a627a  /tmp/pg_linter_b002_results.sarif
-- Test with no output file (should output to prompt)
SELECT pg_linter.perform_base_check();
NOTICE:  üîç pg_linter found 3 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [B002] WARNING: Found 8 potentially redundant indexes
NOTICE:  ‚ö†Ô∏è  [B004] WARNING: Found 11 potentially unused indexes
NOTICE:  ‚ùå [B005] ERROR: Public schema allows CREATE privilege for all users - security risk
NOTICE:  ==================================================
NOTICE:  üìä Summary: 1 error(s), 2 warning(s), 0 info
NOTICE:  üî¥ Critical issues found - please review and fix errors
 perform_base_check 
--------------------
 t
(1 row)

-- Test rule management for B002
SELECT pg_linter.explain_rule('B002');
NOTICE:  üìñ Rule Explanation for B002
============================================================

üéØ Rule Name: HowManyRedudantIndex
üìã Scope: BASE

üìù Description:
Count number of redundant index vs nb index.

‚ö†Ô∏è  Message Template:
{0} redundant(s) index exceed the warning threshold: {1}%.

üîß How to Fix:
   1. remove duplicated index or change warning/error threshold
============================================================
 explain_rule 
--------------
 t
(1 row)

-- Show that B002 is enabled
SELECT pg_linter.is_rule_enabled('B002') AS b002_enabled;
 b002_enabled 
--------------
 t
(1 row)

-- Disable B002 temporarily and test
SELECT pg_linter.disable_rule('B002') AS b002_disabled;
NOTICE:  üî¥ Rule B002 has been disabled
 b002_disabled 
---------------
 t
(1 row)

SELECT pg_linter.perform_base_check();
NOTICE:  üîç pg_linter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [B004] WARNING: Found 11 potentially unused indexes
NOTICE:  ‚ùå [B005] ERROR: Public schema allows CREATE privilege for all users - security risk
NOTICE:  ==================================================
NOTICE:  üìä Summary: 1 error(s), 1 warning(s), 0 info
NOTICE:  üî¥ Critical issues found - please review and fix errors
 perform_base_check 
--------------------
 t
(1 row)

-- Re-enable B002
SELECT pg_linter.enable_rule('B002') AS b002_re_enabled;
NOTICE:  ‚úÖ Rule B002 has been enabled
 b002_re_enabled 
-----------------
 t
(1 row)

-- Clean up test tables
DROP TABLE IF EXISTS test_table_with_redundant_indexes CASCADE;
DROP TABLE IF EXISTS orders_table CASCADE;
ROLLBACK;

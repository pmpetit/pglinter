-- Test for pglinter B007 rule: Tables that are never selected from
-- This script creates tables with mixed usage patterns:
-- - Some tables that are regularly queried (both index and sequential scans)
-- - Some tables that are never selected from (neither idx_scan nor seq_scan)
-- to demonstrate the B007 rule detection of unused tables
CREATE EXTENSION pglinter;
\pset pager off
SELECT pg_stat_reset();
 pg_stat_reset 
---------------
 
(1 row)

-- Clean up any existing test tables
DROP TABLE IF EXISTS active_users_table CASCADE;
NOTICE:  table "active_users_table" does not exist, skipping
DROP TABLE IF EXISTS dormant_logs_table CASCADE;
NOTICE:  table "dormant_logs_table" does not exist, skipping
DROP TABLE IF EXISTS unused_config_table CASCADE;
NOTICE:  table "unused_config_table" does not exist, skipping
DROP TABLE IF EXISTS frequently_accessed_table CASCADE;
NOTICE:  table "frequently_accessed_table" does not exist, skipping
DROP TABLE IF EXISTS completely_unused_table CASCADE;
NOTICE:  table "completely_unused_table" does not exist, skipping
-- Table 1: Active users table (will be frequently accessed)
CREATE TABLE active_users_table (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) NOT NULL,
    last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Add index for performance
CREATE INDEX idx_active_users_username ON active_users_table (username);
CREATE INDEX idx_active_users_last_login ON active_users_table (last_login);
-- Table 2: Dormant logs table (will have some access)
CREATE TABLE dormant_logs_table (
    id SERIAL,
    log_level VARCHAR(20),
    message TEXT,
    logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id INTEGER
);
-- Table 3: Unused configuration table (NEVER accessed - B007 violation)
CREATE TABLE unused_config_table (
    id SERIAL,
    config_key VARCHAR(100) UNIQUE NOT NULL,
    config_value TEXT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Table 4: Frequently accessed table (high activity)
CREATE TABLE frequently_accessed_table (
    id SERIAL PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10,2),
    stock_quantity INTEGER DEFAULT 0,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Add multiple indexes for various query patterns
CREATE INDEX idx_frequently_product_name ON frequently_accessed_table (product_name);
CREATE INDEX idx_frequently_category ON frequently_accessed_table (category);
CREATE INDEX idx_frequently_price ON frequently_accessed_table (price);
-- Table 5: Completely unused table (NEVER accessed - B007 violation)
CREATE TABLE completely_unused_table (
    id SERIAL,
    data_field VARCHAR(200),
    numeric_field INTEGER,
    timestamp_field TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'inactive'
);
-- Insert substantial data into all tables
-- Active users table
INSERT INTO active_users_table (username, email, last_login, is_active)
SELECT
    'user_' || i,
    'user' || i || '@example.com',
    '2024-01-01'::timestamp + (i || ' hours')::interval,
    (i % 2 = 0)
FROM generate_series(1, 8000) i;
-- Dormant logs table
INSERT INTO dormant_logs_table (log_level, message, logged_at, user_id)
SELECT
    CASE (i % 4)
        WHEN 0 THEN 'INFO'
        WHEN 1 THEN 'WARNING'
        WHEN 2 THEN 'ERROR'
        ELSE 'DEBUG'
    END,
    'Log message number ' || i,
    '2024-01-01'::timestamp + (i || ' minutes')::interval,
    (i % 1000) + 1
FROM generate_series(1, 15000) i;
-- Unused configuration table (has data but NEVER queried)
INSERT INTO unused_config_table (config_key, config_value, description)
SELECT
    'config_key_' || i,
    'config_value_' || i,
    'Configuration setting number ' || i
FROM generate_series(1, 2000) i;
-- Frequently accessed table
INSERT INTO frequently_accessed_table (product_name, category, price, stock_quantity)
SELECT
    'Product_' || i,
    CASE (i % 5)
        WHEN 0 THEN 'Electronics'
        WHEN 1 THEN 'Clothing'
        WHEN 2 THEN 'Books'
        WHEN 3 THEN 'Home'
        ELSE 'Sports'
    END,
    (i % 1000) + 10.99,
    (i % 100) + 1
FROM generate_series(1, 12000) i;
-- Completely unused table (has data but NEVER queried)
INSERT INTO completely_unused_table (data_field, numeric_field, status)
SELECT
    'data_entry_' || i,
    i * 7,
    CASE (i % 3)
        WHEN 0 THEN 'inactive'
        WHEN 1 THEN 'pending'
        ELSE 'archived'
    END
FROM generate_series(1, 5000) i;
-- Reset PostgreSQL statistics to start with clean slate
-- Update all table statistics
VACUUM ANALYZE active_users_table;
VACUUM ANALYZE dormant_logs_table;
VACUUM ANALYZE unused_config_table;
VACUUM ANALYZE frequently_accessed_table;
VACUUM ANALYZE completely_unused_table;
select pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

-- Create the extension and test B007 rule
SELECT 'Testing B007 rule - Tables never selected detection...' as test_info;
                       test_info                        
--------------------------------------------------------
 Testing B007 rule - Tables never selected detection...
(1 row)

-- First, disable all rules to isolate B007 testing
SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  🔴 Disabled 20 rule(s)
 all_rules_disabled 
--------------------
                 20
(1 row)

-- Enable only B007 for focused testing
SELECT pglinter.enable_rule('B007') AS b007_enabled;
NOTICE:  ✅ Rule B007 has been enabled
 b007_enabled 
--------------
 t
(1 row)

-- Verify B007 is enabled
SELECT pglinter.is_rule_enabled('B007') AS b007_status;
 b007_status 
-------------
 t
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B007] WARNING: 2/5 table(s) are never selected the warning threshold: 40%.
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_base_check 
--------------------
 t
(1 row)

-- Test with file output
SELECT pglinter.perform_base_check('/tmp/pglinter_b007_results.sarif');
 perform_base_check 
--------------------
 t
(1 row)

\! md5sum /tmp/pglinter_b007_results.sarif
07c7fae6d1a34f5827365eafe09daf7d  /tmp/pglinter_b007_results.sarif
-- Now simulate realistic usage patterns:
-- 1. Heavy usage of active_users_table (both index and sequential scans)
SELECT COUNT(*) FROM active_users_table WHERE is_active = true;
 count 
-------
  4000
(1 row)

SELECT COUNT(*) FROM active_users_table WHERE username = 'user_100';
 count 
-------
     1
(1 row)

SELECT COUNT(*) FROM active_users_table WHERE username LIKE 'user_1%';
 count 
-------
  1111
(1 row)

SELECT id, username, email FROM active_users_table WHERE last_login > '2024-01-15' ORDER BY last_login DESC LIMIT 20;
  id  | username  |        email         
------+-----------+----------------------
 8000 | user_8000 | user8000@example.com
 7999 | user_7999 | user7999@example.com
 7998 | user_7998 | user7998@example.com
 7997 | user_7997 | user7997@example.com
 7996 | user_7996 | user7996@example.com
 7995 | user_7995 | user7995@example.com
 7994 | user_7994 | user7994@example.com
 7993 | user_7993 | user7993@example.com
 7992 | user_7992 | user7992@example.com
 7991 | user_7991 | user7991@example.com
 7990 | user_7990 | user7990@example.com
 7989 | user_7989 | user7989@example.com
 7988 | user_7988 | user7988@example.com
 7987 | user_7987 | user7987@example.com
 7986 | user_7986 | user7986@example.com
 7985 | user_7985 | user7985@example.com
 7984 | user_7984 | user7984@example.com
 7983 | user_7983 | user7983@example.com
 7982 | user_7982 | user7982@example.com
 7981 | user_7981 | user7981@example.com
(20 rows)

SELECT username, email FROM active_users_table WHERE is_active = true ORDER BY id LIMIT 100;
 username |        email        
----------+---------------------
 user_2   | user2@example.com
 user_4   | user4@example.com
 user_6   | user6@example.com
 user_8   | user8@example.com
 user_10  | user10@example.com
 user_12  | user12@example.com
 user_14  | user14@example.com
 user_16  | user16@example.com
 user_18  | user18@example.com
 user_20  | user20@example.com
 user_22  | user22@example.com
 user_24  | user24@example.com
 user_26  | user26@example.com
 user_28  | user28@example.com
 user_30  | user30@example.com
 user_32  | user32@example.com
 user_34  | user34@example.com
 user_36  | user36@example.com
 user_38  | user38@example.com
 user_40  | user40@example.com
 user_42  | user42@example.com
 user_44  | user44@example.com
 user_46  | user46@example.com
 user_48  | user48@example.com
 user_50  | user50@example.com
 user_52  | user52@example.com
 user_54  | user54@example.com
 user_56  | user56@example.com
 user_58  | user58@example.com
 user_60  | user60@example.com
 user_62  | user62@example.com
 user_64  | user64@example.com
 user_66  | user66@example.com
 user_68  | user68@example.com
 user_70  | user70@example.com
 user_72  | user72@example.com
 user_74  | user74@example.com
 user_76  | user76@example.com
 user_78  | user78@example.com
 user_80  | user80@example.com
 user_82  | user82@example.com
 user_84  | user84@example.com
 user_86  | user86@example.com
 user_88  | user88@example.com
 user_90  | user90@example.com
 user_92  | user92@example.com
 user_94  | user94@example.com
 user_96  | user96@example.com
 user_98  | user98@example.com
 user_100 | user100@example.com
 user_102 | user102@example.com
 user_104 | user104@example.com
 user_106 | user106@example.com
 user_108 | user108@example.com
 user_110 | user110@example.com
 user_112 | user112@example.com
 user_114 | user114@example.com
 user_116 | user116@example.com
 user_118 | user118@example.com
 user_120 | user120@example.com
 user_122 | user122@example.com
 user_124 | user124@example.com
 user_126 | user126@example.com
 user_128 | user128@example.com
 user_130 | user130@example.com
 user_132 | user132@example.com
 user_134 | user134@example.com
 user_136 | user136@example.com
 user_138 | user138@example.com
 user_140 | user140@example.com
 user_142 | user142@example.com
 user_144 | user144@example.com
 user_146 | user146@example.com
 user_148 | user148@example.com
 user_150 | user150@example.com
 user_152 | user152@example.com
 user_154 | user154@example.com
 user_156 | user156@example.com
 user_158 | user158@example.com
 user_160 | user160@example.com
 user_162 | user162@example.com
 user_164 | user164@example.com
 user_166 | user166@example.com
 user_168 | user168@example.com
 user_170 | user170@example.com
 user_172 | user172@example.com
 user_174 | user174@example.com
 user_176 | user176@example.com
 user_178 | user178@example.com
 user_180 | user180@example.com
 user_182 | user182@example.com
 user_184 | user184@example.com
 user_186 | user186@example.com
 user_188 | user188@example.com
 user_190 | user190@example.com
 user_192 | user192@example.com
 user_194 | user194@example.com
 user_196 | user196@example.com
 user_198 | user198@example.com
 user_200 | user200@example.com
(100 rows)

-- 2. Moderate usage of dormant_logs_table (some scans)
SELECT COUNT(*) FROM dormant_logs_table WHERE log_level = 'ERROR';
 count 
-------
  3750
(1 row)

SELECT message FROM dormant_logs_table WHERE logged_at > '2024-01-01' LIMIT 50;
        message        
-----------------------
 Log message number 1
 Log message number 2
 Log message number 3
 Log message number 4
 Log message number 5
 Log message number 6
 Log message number 7
 Log message number 8
 Log message number 9
 Log message number 10
 Log message number 11
 Log message number 12
 Log message number 13
 Log message number 14
 Log message number 15
 Log message number 16
 Log message number 17
 Log message number 18
 Log message number 19
 Log message number 20
 Log message number 21
 Log message number 22
 Log message number 23
 Log message number 24
 Log message number 25
 Log message number 26
 Log message number 27
 Log message number 28
 Log message number 29
 Log message number 30
 Log message number 31
 Log message number 32
 Log message number 33
 Log message number 34
 Log message number 35
 Log message number 36
 Log message number 37
 Log message number 38
 Log message number 39
 Log message number 40
 Log message number 41
 Log message number 42
 Log message number 43
 Log message number 44
 Log message number 45
 Log message number 46
 Log message number 47
 Log message number 48
 Log message number 49
 Log message number 50
(50 rows)

SELECT COUNT(*) FROM dormant_logs_table WHERE user_id IS NOT NULL;
 count 
-------
 15000
(1 row)

-- 3. High usage of frequently_accessed_table (many different query patterns)
SELECT COUNT(*) FROM frequently_accessed_table WHERE category = 'Electronics';
 count 
-------
  2400
(1 row)

SELECT product_name, price FROM frequently_accessed_table WHERE price > 500 ORDER BY price DESC LIMIT 10;
 product_name  |  price  
---------------+---------
 Product_11999 | 1009.99
 Product_10999 | 1009.99
 Product_9999  | 1009.99
 Product_8999  | 1009.99
 Product_7999  | 1009.99
 Product_6999  | 1009.99
 Product_5999  | 1009.99
 Product_4999  | 1009.99
 Product_3999  | 1009.99
 Product_2999  | 1009.99
(10 rows)

SELECT category, COUNT(*) FROM frequently_accessed_table GROUP BY category;
  category   | count 
-------------+-------
 Books       |  2400
 Clothing    |  2400
 Electronics |  2400
 Home        |  2400
 Sports      |  2400
(5 rows)

SELECT AVG(price) FROM frequently_accessed_table WHERE stock_quantity > 50;
         avg          
----------------------
 535.4900000000000000
(1 row)

SELECT id,product_name,category,price FROM frequently_accessed_table WHERE product_name = 'Product_1000';
  id  | product_name |  category   | price 
------+--------------+-------------+-------
 1000 | Product_1000 | Electronics | 10.99
(1 row)

SELECT COUNT(*) FROM frequently_accessed_table WHERE category IN ('Electronics', 'Books');
 count 
-------
  4800
(1 row)

-- 4. NO usage of unused_config_table (B007 violation - never selected)
-- (Intentionally no queries to simulate unused table)
-- 5. NO usage of completely_unused_table (B007 violation - never selected)
-- (Intentionally no queries to simulate completely unused table)
-- Update statistics after usage simulation
VACUUM ANALYZE active_users_table;
VACUUM ANALYZE dormant_logs_table;
VACUUM ANALYZE unused_config_table;
VACUUM ANALYZE frequently_accessed_table;
VACUUM ANALYZE completely_unused_table;
-- Allow time for statistics to be recorded
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- Run base check to detect B007 violations
-- Expected result: Should detect unused_config_table and completely_unused_table
SELECT 'Running base check to detect B007 violations (tables never selected)...' as status;
                                 status                                  
-------------------------------------------------------------------------
 Running base check to detect B007 violations (tables never selected)...
(1 row)

SELECT pglinter.perform_base_check();
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B007] WARNING: 1/5 table(s) are never selected the warning threshold: 20%.
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_base_check 
--------------------
 t
(1 row)

-- Clean up test tables
DROP TABLE IF EXISTS active_users_table CASCADE;
DROP TABLE IF EXISTS dormant_logs_table CASCADE;
DROP TABLE IF EXISTS unused_config_table CASCADE;
DROP TABLE IF EXISTS frequently_accessed_table CASCADE;
DROP TABLE IF EXISTS completely_unused_table CASCADE;
SELECT 'B007 comprehensive test completed successfully!' as test_result;
                   test_result                   
-------------------------------------------------
 B007 comprehensive test completed successfully!
(1 row)

ROLLBACK;
WARNING:  there is no transaction in progress
DROP EXTENSION pglinter CASCADE;

-- Regression test for B015 rule - Tables with shared trigger functions
-- This script creates a test scenario with:
-- - 10 tables total
-- - 5 tables with their own unique trigger functions
-- - 3 tables sharing the same trigger function
-- - 2 tables without any triggers
CREATE EXTENSION IF NOT EXISTS pglinter;
\pset pager off
CREATE SCHEMA trigger_test;
-- =============================================================================
-- Create 10 test tables
-- =============================================================================
-- Tables 1-5: Each will have its own unique trigger function
CREATE TABLE trigger_test.table_01 (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50),
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_02 (
    id SERIAL PRIMARY KEY,
    description TEXT,
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_03 (
    id SERIAL PRIMARY KEY,
    value INTEGER,
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_04 (
    id SERIAL PRIMARY KEY,
    status VARCHAR(20),
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_05 (
    id SERIAL PRIMARY KEY,
    category VARCHAR(30),
    updated_at TIMESTAMP DEFAULT NOW()
);
-- Tables 6-8: Will share the same trigger function
CREATE TABLE trigger_test.table_06 (
    id SERIAL PRIMARY KEY,
    data JSONB,
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_07 (
    id SERIAL PRIMARY KEY,
    content TEXT,
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_08 (
    id SERIAL PRIMARY KEY,
    amount DECIMAL(10,2),
    updated_at TIMESTAMP DEFAULT NOW()
);
-- Tables 9-10: No triggers
CREATE TABLE trigger_test.table_09 (
    id SERIAL PRIMARY KEY,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE trigger_test.table_10 (
    id SERIAL PRIMARY KEY,
    archived BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);
-- =============================================================================
-- Create unique trigger functions for tables 1-5
-- =============================================================================
-- Trigger function for table_01
CREATE OR REPLACE FUNCTION trigger_test.update_table_01_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Table 01 trigger executed for ID %', NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Trigger function for table_02
CREATE OR REPLACE FUNCTION trigger_test.update_table_02_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Table 02 trigger executed for ID %', NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Trigger function for table_03
CREATE OR REPLACE FUNCTION trigger_test.update_table_03_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Table 03 trigger executed for ID %', NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Trigger function for table_04
CREATE OR REPLACE FUNCTION trigger_test.update_table_04_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Table 04 trigger executed for ID %', NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Trigger function for table_05
CREATE OR REPLACE FUNCTION trigger_test.update_table_05_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Table 05 trigger executed for ID %', NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- =============================================================================
-- Create shared trigger function for tables 6-8
-- =============================================================================
-- Shared trigger function that will be used by tables 6, 7, and 8
CREATE OR REPLACE FUNCTION trigger_test.shared_update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RAISE NOTICE 'Shared trigger executed for table % with ID %', TG_TABLE_NAME, NEW.id;

    -- Example of problematic shared logic (like the original issue)
    IF TG_TABLE_NAME = 'table_06' THEN
        -- Special logic for table_06
        RAISE NOTICE 'Special processing for table_06';
    ELSIF TG_TABLE_NAME = 'table_07' THEN
        -- Special logic for table_07
        RAISE NOTICE 'Special processing for table_07';
    ELSIF TG_TABLE_NAME = 'table_08' THEN
        -- Special logic for table_08
        RAISE NOTICE 'Special processing for table_08';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- =============================================================================
-- Create triggers on tables 1-8
-- =============================================================================
-- Unique triggers for tables 1-5
CREATE TRIGGER trigger_table_01_update
    BEFORE UPDATE ON trigger_test.table_01
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.update_table_01_timestamp();
CREATE TRIGGER trigger_table_02_update
    BEFORE UPDATE ON trigger_test.table_02
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.update_table_02_timestamp();
CREATE TRIGGER trigger_table_03_update
    BEFORE UPDATE ON trigger_test.table_03
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.update_table_03_timestamp();
CREATE TRIGGER trigger_table_04_update
    BEFORE UPDATE ON trigger_test.table_04
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.update_table_04_timestamp();
CREATE TRIGGER trigger_table_05_update
    BEFORE UPDATE ON trigger_test.table_05
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.update_table_05_timestamp();
-- Shared triggers for tables 6-8 (using the same function)
CREATE TRIGGER trigger_table_06_update
    BEFORE UPDATE ON trigger_test.table_06
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.shared_update_timestamp();
CREATE TRIGGER trigger_table_07_update
    BEFORE UPDATE ON trigger_test.table_07
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.shared_update_timestamp();
CREATE TRIGGER trigger_table_08_update
    BEFORE UPDATE ON trigger_test.table_08
    FOR EACH ROW
    EXECUTE FUNCTION trigger_test.shared_update_timestamp();
-- Tables 9 and 10 have NO triggers (as required)
-- =============================================================================
-- Test the scenario
-- =============================================================================
-- Insert test data
INSERT INTO trigger_test.table_01 (name) VALUES ('Test 1');
INSERT INTO trigger_test.table_02 (description) VALUES ('Test 2');
INSERT INTO trigger_test.table_03 (value) VALUES (123);
INSERT INTO trigger_test.table_04 (status) VALUES ('active');
INSERT INTO trigger_test.table_05 (category) VALUES ('sample');
INSERT INTO trigger_test.table_06 (data) VALUES ('{"test": "data"}');
INSERT INTO trigger_test.table_07 (content) VALUES ('Sample content');
INSERT INTO trigger_test.table_08 (amount) VALUES (99.99);
INSERT INTO trigger_test.table_09 (notes) VALUES ('No trigger table');
INSERT INTO trigger_test.table_10 (archived) VALUES (false);
-- Test with only B015 enabled
SELECT 'Testing B015 in isolation...' AS test_step;
          test_step           
------------------------------
 Testing B015 in isolation...
(1 row)

SELECT pglinter.disable_all_rules() AS all_disabled;
NOTICE:  üî¥ Disabled 23 rule(s)
 all_disabled 
--------------
           23
(1 row)

SELECT pglinter.enable_rule('B015') AS b015_only_enabled;
NOTICE:  ‚úÖ Rule B015 has been enabled
 b015_only_enabled 
-------------------
 t
(1 row)

SELECT pglinter.perform_base_check(); -- Should only run B015
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [B015] WARNING: 3/8 table(s) using the same trigger function exceed the warning threshold: 37%.
NOTICE:  ==================================================
NOTICE:  üìä Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  üü° Some warnings found - consider reviewing for optimization
 perform_base_check 
--------------------
 t
(1 row)

SELECT pglinter.enable_rule('T015') AS t015_only_enabled;
NOTICE:  ‚úÖ Rule T015 has been enabled
 t015_only_enabled 
-------------------
 t
(1 row)

SELECT pglinter.perform_table_check(); -- Should only run T015
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [T015] WARNING: TABLE Table shares trigger function with other tables. 3 : 
trigger_test.table_06 shares trigger function trigger_test.shared_update_timestamp with other tables
trigger_test.table_07 shares trigger function trigger_test.shared_update_timestamp with other tables
trigger_test.table_08 shares trigger function trigger_test.shared_update_timestamp with other tables 

NOTICE:  ==================================================
NOTICE:  üìä Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  üü° Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Test with output
SELECT pglinter.perform_base_check('/tmp/pglinter_b015_results.sarif');
 perform_base_check 
--------------------
 t
(1 row)

-- Test if file exists and show checksum
\! md5sum /tmp/pglinter_b015_results.sarif
bc9862aaea33e520b1b22558d8c1a840  /tmp/pglinter_b015_results.sarif
-- Cleanup
\echo 'Cleaning up test schema...'
Cleaning up test schema...
DROP SCHEMA trigger_test CASCADE;
NOTICE:  drop cascades to 16 other objects
DETAIL:  drop cascades to table trigger_test.table_01
drop cascades to table trigger_test.table_02
drop cascades to table trigger_test.table_03
drop cascades to table trigger_test.table_04
drop cascades to table trigger_test.table_05
drop cascades to table trigger_test.table_06
drop cascades to table trigger_test.table_07
drop cascades to table trigger_test.table_08
drop cascades to table trigger_test.table_09
drop cascades to table trigger_test.table_10
drop cascades to function trigger_test.update_table_01_timestamp()
drop cascades to function trigger_test.update_table_02_timestamp()
drop cascades to function trigger_test.update_table_03_timestamp()
drop cascades to function trigger_test.update_table_04_timestamp()
drop cascades to function trigger_test.update_table_05_timestamp()
drop cascades to function trigger_test.shared_update_timestamp()
DROP EXTENSION pglinter;

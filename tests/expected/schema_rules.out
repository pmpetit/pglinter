-- Test for S001 and S002 schema rules
BEGIN;
DROP EXTENSION IF EXISTS pglinter CASCADE;
NOTICE:  extension "pglinter" does not exist, skipping
-- Create test schemas that should trigger S002 (environment prefixes/suffixes)
CREATE SCHEMA prod_sales;
CREATE SCHEMA dev_analytics;
CREATE SCHEMA testing_data;
CREATE SCHEMA reports_staging;
-- Create a clean schema that should not trigger rules
CREATE SCHEMA business_logic;
-- Create some objects in the schemas to make them more realistic
CREATE TABLE prod_sales.customers (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL
);
CREATE TABLE dev_analytics.metrics (
    id SERIAL PRIMARY KEY,
    metric_name TEXT NOT NULL,
    value NUMERIC
);
CREATE TABLE business_logic.rules (
    id SERIAL PRIMARY KEY,
    rule_name TEXT NOT NULL
);
CREATE EXTENSION IF NOT EXISTS pglinter;
-- Test the schema rules
SELECT 'Testing schema rules S001 and S002...' as test_info;
               test_info               
---------------------------------------
 Testing schema rules S001 and S002...
(1 row)

-- Run schema check to detect environment-named schemas and default privilege issues
SELECT pglinter.perform_schema_check();
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [S001] WARNING: Found 6 schemas without default role grants: business_logic, dev_analytics, prod_sales, reports_staging, testing_data, tests
NOTICE:  ⚠️  [S002] WARNING: Found 5 schemas with environment prefixes/suffixes: prod_sales, dev_analytics, testing_data, reports_staging, tests
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 2 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_schema_check 
----------------------
 t
(1 row)

-- Test individual schema rules
SELECT pglinter.explain_rule('S001');
NOTICE:  📖 Rule Explanation for S001
============================================================

🎯 Rule Name: SchemaWithDefaultRoleNotGranted
📋 Scope: SCHEMA

📝 Description:
The schema ha no default role. Means that futur table will not be granted through a role. So you will have to re-execute grants on it.

⚠️  Message Template:
No default role grantee on schema {0}.{1}. It means that each time a table is created, you must grant it to roles.

🔧 How to Fix:
   1. add a default privilege=> ALTER DEFAULT PRIVILEGES IN SCHEMA <schema> for user <schema's owner>
============================================================
 explain_rule 
--------------
 t
(1 row)

SELECT pglinter.explain_rule('S002');
NOTICE:  📖 Rule Explanation for S002
============================================================

🎯 Rule Name: SchemaPrefixedOrSuffixedWithEnvt
📋 Scope: SCHEMA

📝 Description:
The schema is prefixed with one of staging,stg,preprod,prod,sandbox,sbox string. Means that when you refresh your preprod, staging environments from production, you have to rename the target schema from prod_ to stg_ or something like. It is possible, but it is never easy.

⚠️  Message Template:
You should not prefix or suffix the schema name with {0}. You may have difficulties when refreshing environments. Prefer prefix or suffix the database name.

🔧 How to Fix:
   1. Keep the same schema name across environments. Prefer prefix or suffix the database name
============================================================
 explain_rule 
--------------
 t
(1 row)

-- Test rule management for schema rules
SELECT pglinter.is_rule_enabled('S001') AS s001_enabled;
 s001_enabled 
--------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('S002') AS s002_enabled;
 s002_enabled 
--------------
 t
(1 row)

-- Test disabling S002 (environment prefixes)
SELECT pglinter.disable_rule('S002') AS s002_disabled;
NOTICE:  🔴 Rule S002 has been disabled
 s002_disabled 
---------------
 t
(1 row)

SELECT pglinter.perform_schema_check(); -- Should skip S002
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [S001] WARNING: Found 6 schemas without default role grants: business_logic, dev_analytics, prod_sales, reports_staging, testing_data, tests
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_schema_check 
----------------------
 t
(1 row)

-- Re-enable S002
SELECT pglinter.enable_rule('S002') AS s002_reenabled;
NOTICE:  ✅ Rule S002 has been enabled
 s002_reenabled 
----------------
 t
(1 row)

SELECT pglinter.perform_schema_check(); -- Should include S002 again
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [S001] WARNING: Found 6 schemas without default role grants: business_logic, dev_analytics, prod_sales, reports_staging, testing_data, tests
NOTICE:  ⚠️  [S002] WARNING: Found 5 schemas with environment prefixes/suffixes: prod_sales, dev_analytics, testing_data, reports_staging, tests
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 2 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_schema_check 
----------------------
 t
(1 row)

-- Test the comprehensive check including schemas
SELECT pglinter.check_all();
NOTICE:  🔍 Running comprehensive pglinter check...
NOTICE:  
NOTICE:  📋 BASE CHECKS:
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [B004] WARNING: Found 3 potentially unused indexes
NOTICE:  ❌ [B005] ERROR: Public schema allows CREATE privilege for all users - security risk
NOTICE:  ==================================================
NOTICE:  📊 Summary: 1 error(s), 1 warning(s), 0 info
NOTICE:  🔴 Critical issues found - please review and fix errors
NOTICE:  
NOTICE:  🖥️  CLUSTER CHECKS:
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ℹ️  [C002] INFO: Please manually check pg_hba.conf for insecure trust/password methods
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 0 warning(s), 1 info
NOTICE:  🟢 Only informational messages - good job!
NOTICE:  
NOTICE:  📊 TABLE CHECKS:
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [T009] WARNING: Found 4 tables without role grants: prod_sales.customers, dev_analytics.metrics, business_logic.rules, pglinter.rules
NOTICE:  ℹ️  [T012] INFO: Anon extension not found. Install postgresql-anonymizer to detect sensitive columns
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 1 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
NOTICE:  
NOTICE:  🗂️  SCHEMA CHECKS:
NOTICE:  🔍 pglinter found 2 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [S001] WARNING: Found 6 schemas without default role grants: business_logic, dev_analytics, prod_sales, reports_staging, testing_data, tests
NOTICE:  ⚠️  [S002] WARNING: Found 5 schemas with environment prefixes/suffixes: prod_sales, dev_analytics, testing_data, reports_staging, tests
NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 2 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
NOTICE:  
NOTICE:  🎉 All pglinter checks completed successfully!
 check_all 
-----------
 t
(1 row)

-- Clean up schemas
DROP SCHEMA prod_sales CASCADE;
NOTICE:  drop cascades to table prod_sales.customers
DROP SCHEMA dev_analytics CASCADE;
NOTICE:  drop cascades to table dev_analytics.metrics
DROP SCHEMA testing_data CASCADE;
DROP SCHEMA reports_staging CASCADE;
DROP SCHEMA business_logic CASCADE;
NOTICE:  drop cascades to table business_logic.rules
ROLLBACK;

-- Simple example to demonstrate missing primary keys and T001 rule detection
-- This script creates tables without primary keys and shows how the T001 rule detects this issue.
CREATE EXTENSION pglinter;
\pset pager off
-- Create tables without primary keys (should trigger T001)
CREATE TABLE customer_orders (
    order_id INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    order_date DATE NOT NULL DEFAULT CURRENT_DATE,
    quantity INTEGER DEFAULT 1,
    total_amount DECIMAL(10,2),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE product_reviews (
    review_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    review_date DATE DEFAULT CURRENT_DATE,
    helpful_votes INTEGER DEFAULT 0
);
CREATE TABLE user_sessions (
    session_id VARCHAR(64) NOT NULL,
    user_id INTEGER NOT NULL,
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_time TIMESTAMP,
    ip_address INET,
    user_agent TEXT,
    is_active BOOLEAN DEFAULT TRUE
);
CREATE TABLE inventory_logs (
    log_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    change_type VARCHAR(20) NOT NULL, -- 'addition', 'removal', 'adjustment'
    quantity_change INTEGER NOT NULL,
    previous_quantity INTEGER,
    new_quantity INTEGER,
    reason TEXT,
    logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logged_by VARCHAR(50)
);
-- Create one table WITH a proper primary key (should NOT trigger T001)
CREATE TABLE good_table_with_pk (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Insert some test data to make the tables more realistic
INSERT INTO customer_orders (order_id, customer_id, product_id, quantity, total_amount, status)
VALUES
    (1001, 1, 101, 2, 59.98, 'completed'),
    (1002, 2, 102, 1, 29.99, 'pending'),
    (1003, 1, 103, 3, 89.97, 'shipped'),
    (1004, 3, 101, 1, 29.99, 'completed');
INSERT INTO product_reviews (review_id, product_id, customer_id, rating, review_text)
VALUES
    (2001, 101, 1, 5, 'Excellent product, highly recommended!'),
    (2002, 102, 2, 4, 'Good quality, fast delivery'),
    (2003, 103, 1, 3, 'Average product, could be better'),
    (2004, 101, 3, 5, 'Amazing quality and value');
INSERT INTO user_sessions (session_id, user_id, ip_address, user_agent)
VALUES
    ('sess_abc123def456', 1, '192.168.1.100', 'Mozilla/5.0 Chrome/91.0'),
    ('sess_xyz789uvw012', 2, '192.168.1.101', 'Mozilla/5.0 Firefox/89.0'),
    ('sess_mno345pqr678', 3, '192.168.1.102', 'Mozilla/5.0 Safari/14.1');
INSERT INTO inventory_logs (log_id, product_id, change_type, quantity_change, previous_quantity, new_quantity, reason, logged_by)
VALUES
    (3001, 101, 'addition', 50, 100, 150, 'Restocking from supplier', 'admin'),
    (3002, 102, 'removal', -5, 75, 70, 'Damaged items removed', 'manager'),
    (3003, 103, 'adjustment', -2, 50, 48, 'Inventory count correction', 'admin'),
    (3004, 101, 'removal', -2, 150, 148, 'Customer purchase', 'system');
INSERT INTO good_table_with_pk (name, description)
VALUES
    ('Sample Item 1', 'This table has a proper primary key'),
    ('Sample Item 2', 'Primary keys are essential for data integrity'),
    ('Sample Item 3', 'This table should not trigger T001 rule');
-- Update table statistics
ANALYZE customer_orders;
ANALYZE product_reviews;
ANALYZE user_sessions;
ANALYZE inventory_logs;
ANALYZE good_table_with_pk;
-- Disable all rules first to isolate T001 testing
SELECT 'Disabling all rules to test T001 specifically...' as status;
                      status                      
--------------------------------------------------
 Disabling all rules to test T001 specifically...
(1 row)

SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  🔴 Disabled 23 rule(s)
 all_rules_disabled 
--------------------
                 23
(1 row)

-- Run table check (should show no results since all rules are disabled)
SELECT 'Running table check with all rules disabled (should show no T001 results):' as test_info;
                                 test_info                                  
----------------------------------------------------------------------------
 Running table check with all rules disabled (should show no T001 results):
(1 row)

SELECT pglinter.perform_table_check();
NOTICE:  ✅ No issues found - database schema looks good!
 perform_table_check 
---------------------
 t
(1 row)

-- Test rule management for T001
SELECT 'Testing T001 rule management:' as test_info;
           test_info           
-------------------------------
 Testing T001 rule management:
(1 row)

SELECT pglinter.explain_rule('T001');
NOTICE:  📖 Rule Explanation for T001
============================================================

🎯 Rule Name: TableWithoutPrimaryKey
📋 Scope: TABLE

📝 Description:
table without primary key.

⚠️  Message Template:
no primary key on table(s)

🔧 How to Fix:
   1. create a primary key
============================================================
 explain_rule 
--------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('T001') AS t001_enabled;
 t001_enabled 
--------------
 f
(1 row)

-- Enable T001 specifically
SELECT 'Enabling T001 rule...' as status;
        status         
-----------------------
 Enabling T001 rule...
(1 row)

SELECT pglinter.enable_rule('T001') AS t001_reenabled;
NOTICE:  ✅ Rule T001 has been enabled
 t001_reenabled 
----------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('T001') AS t001_enabled_after;
 t001_enabled_after 
--------------------
 t
(1 row)

-- Run table check to detect tables without primary keys
SELECT 'Running table check with T001 enabled - should detect tables without primary keys:' as test_info;
                                     test_info                                      
------------------------------------------------------------------------------------
 Running table check with T001 enabled - should detect tables without primary keys:
(1 row)

SELECT pglinter.perform_table_check(); -- Should include T001 results
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [T001] WARNING: TABLE no primary key on table(s) 4 : 
public.customer_orders
public.inventory_logs
public.product_reviews
public.user_sessions 

NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Test disabling T001 temporarily
SELECT 'Testing T001 disable/enable cycle:' as test_info;
             test_info              
------------------------------------
 Testing T001 disable/enable cycle:
(1 row)

SELECT pglinter.disable_rule('T001') AS t001_disabled;
NOTICE:  🔴 Rule T001 has been disabled
 t001_disabled 
---------------
 t
(1 row)

SELECT pglinter.perform_table_check(); -- Should skip T001
NOTICE:  ✅ No issues found - database schema looks good!
 perform_table_check 
---------------------
 t
(1 row)

-- Re-enable T001 and test again
SELECT pglinter.enable_rule('T001') AS t001_re_enabled;
NOTICE:  ✅ Rule T001 has been enabled
 t001_re_enabled 
-----------------
 t
(1 row)

SELECT pglinter.perform_table_check(); -- Should include T001 again
NOTICE:  🔍 pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ⚠️  [T001] WARNING: TABLE no primary key on table(s) 4 : 
public.customer_orders
public.inventory_logs
public.product_reviews
public.user_sessions 

NOTICE:  ==================================================
NOTICE:  📊 Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  🟡 Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Now let's fix the primary key issues to show the difference
SELECT 'Adding primary keys to demonstrate T001 behavior change...' as status;
                           status                           
------------------------------------------------------------
 Adding primary keys to demonstrate T001 behavior change...
(1 row)

-- Add primary keys to tables
ALTER TABLE customer_orders ADD CONSTRAINT pk_customer_orders PRIMARY KEY (order_id);
ALTER TABLE product_reviews ADD CONSTRAINT pk_product_reviews PRIMARY KEY (review_id);
ALTER TABLE user_sessions ADD CONSTRAINT pk_user_sessions PRIMARY KEY (session_id);
ALTER TABLE inventory_logs ADD CONSTRAINT pk_inventory_logs PRIMARY KEY (log_id);
-- Update statistics after schema changes
ANALYZE customer_orders;
ANALYZE product_reviews;
ANALYZE user_sessions;
ANALYZE inventory_logs;
-- Run T001 check again (should show no issues now)
SELECT 'Running T001 check after adding primary keys (should show no issues):' as test_info;
                               test_info                               
-----------------------------------------------------------------------
 Running T001 check after adding primary keys (should show no issues):
(1 row)

SELECT pglinter.perform_table_check();
NOTICE:  ✅ No issues found - database schema looks good!
 perform_table_check 
---------------------
 t
(1 row)

DROP TABLE test_app_schema.users_no_grants CASCADE;
ERROR:  schema "test_app_schema" does not exist
DROP TABLE test_app_schema.products_no_grants CASCADE;
ERROR:  schema "test_app_schema" does not exist
DROP TABLE test_reports_schema.sales_data_no_grants CASCADE;
ERROR:  schema "test_reports_schema" does not exist
DROP TABLE test_data_schema.analytics_no_grants CASCADE;
ERROR:  schema "test_data_schema" does not exist
DROP TABLE test_app_schema.orders_with_grants CASCADE;
ERROR:  schema "test_app_schema" does not exist
DROP TABLE test_reports_schema.monthly_reports_with_grants CASCADE;
ERROR:  schema "test_reports_schema" does not exist
DROP TABLE test_data_schema.processed_events_with_grants CASCADE;
ERROR:  schema "test_data_schema" does not exist
DROP TABLE public.public_table_test CASCADE;
ERROR:  table "public_table_test" does not exist
DROP EXTENSION pglinter CASCADE;

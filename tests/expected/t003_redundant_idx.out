-- Test for pglinter T003 rule: Tables with redundant indexes
BEGIN;
-- Create test tables with redundant indexes for T003 testing
CREATE TABLE IF NOT EXISTS customers_with_redundant_idx (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
-- Create another table for more redundant index scenarios
CREATE TABLE IF NOT EXISTS products_with_redundant_idx (
    product_id SERIAL PRIMARY KEY,
    sku VARCHAR(50),
    name VARCHAR(255),
    category VARCHAR(100),
    price DECIMAL(10,2),
    stock_quantity INT,
    is_active BOOLEAN DEFAULT TRUE
);
-- Create a third table to test multiple tables with redundant indexes
CREATE TABLE IF NOT EXISTS orders_with_redundant_idx (
    order_id SERIAL PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    order_date DATE,
    status VARCHAR(50),
    total_amount DECIMAL(10,2)
);
-- Case 1: Exact duplicate indexes on customers table
CREATE INDEX idx_customers_email_1 ON customers_with_redundant_idx (email);
CREATE INDEX idx_customers_email_2 ON customers_with_redundant_idx (email);
-- Case 2: Same composite index created twice on customers table
CREATE INDEX idx_customers_name_1 ON customers_with_redundant_idx (first_name, last_name);
CREATE INDEX idx_customers_name_2 ON customers_with_redundant_idx (first_name, last_name);
-- Case 3: Redundant indexes on products table
CREATE INDEX idx_products_sku_1 ON products_with_redundant_idx (sku);
CREATE INDEX idx_products_sku_2 ON products_with_redundant_idx (sku);
-- Case 4: Complex composite index redundancy on products table
CREATE INDEX idx_products_category_active_1 ON products_with_redundant_idx (category, is_active);
CREATE INDEX idx_products_category_active_2 ON products_with_redundant_idx (category, is_active);
-- Case 5: Redundant indexes on orders table
CREATE INDEX idx_orders_customer_1 ON orders_with_redundant_idx (customer_id);
CREATE INDEX idx_orders_customer_2 ON orders_with_redundant_idx (customer_id);
-- Case 6: Different composite index redundancy on orders table
CREATE INDEX idx_orders_date_status_1 ON orders_with_redundant_idx (order_date, status);
CREATE INDEX idx_orders_date_status_2 ON orders_with_redundant_idx (order_date, status);
-- Case 7: Add some non-redundant indexes to ensure they don't trigger the rule
CREATE INDEX idx_customers_phone ON customers_with_redundant_idx (phone);
CREATE INDEX idx_products_price ON products_with_redundant_idx (price);
CREATE INDEX idx_orders_total ON orders_with_redundant_idx (total_amount);
CREATE EXTENSION IF NOT EXISTS pglinter;
-- First, disable all rules to isolate T003 testing
SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  üî¥ Disabled 22 rule(s)
 all_rules_disabled 
--------------------
                 22
(1 row)

-- Enable only T003 for focused testing
SELECT pglinter.enable_rule('T003') AS t003_enabled;
NOTICE:  ‚úÖ Rule T003 has been enabled
 t003_enabled 
--------------
 t
(1 row)

-- Test with file output
SELECT pglinter.perform_table_check('/tmp/pglinter_t003_results.sarif');
 perform_table_check 
---------------------
 t
(1 row)

-- Test if file exists and show checksum
\! md5sum /tmp/pglinter_t003_results.sarif
55c3a221f14f925913d2eb534215fa68  /tmp/pglinter_t003_results.sarif
-- Test with no output file (should output to prompt)
SELECT pglinter.perform_table_check();
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [T003] WARNING: Found 3 tables with redundant indexes: public.customers_with_redundant_idx (indexes: customers_with_redundant_idx_email_key, idx_customers_email_1, idx_customers_email_2, idx_customers_name_1, idx_customers_name_2), public.orders_with_redundant_idx (indexes: idx_orders_customer_1, idx_orders_customer_2, idx_orders_date_status_1, idx_orders_date_status_2), public.products_with_redundant_idx (indexes: idx_products_category_active_1, idx_products_category_active_2, idx_products_sku_1, idx_products_sku_2)
NOTICE:  ==================================================
NOTICE:  üìä Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  üü° Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Test rule management for T003
SELECT pglinter.explain_rule('T003');
NOTICE:  üìñ Rule Explanation for T003
============================================================

üéØ Rule Name: TableWithRedundantIndex
üìã Scope: TABLE

üìù Description:
table without duplicated index.

‚ö†Ô∏è  Message Template:
{0} redundant(s) index found on {1}.{2} idx {3} column {4}.

üîß How to Fix:
   1. remove duplicated index
   2. check for constraints that create indexes.
============================================================
 explain_rule 
--------------
 t
(1 row)

-- Show that T003 is enabled
SELECT pglinter.is_rule_enabled('T003') AS t003_enabled;
 t003_enabled 
--------------
 t
(1 row)

-- Disable T003 temporarily and test
SELECT pglinter.disable_rule('T003') AS t003_disabled;
NOTICE:  üî¥ Rule T003 has been disabled
 t003_disabled 
---------------
 t
(1 row)

SELECT pglinter.perform_table_check();
NOTICE:  ‚úÖ No issues found - database schema looks good!
 perform_table_check 
---------------------
 t
(1 row)

-- Re-enable T003 and test again
SELECT pglinter.enable_rule('T003') AS t003_re_enabled;
NOTICE:  ‚úÖ Rule T003 has been enabled
 t003_re_enabled 
-----------------
 t
(1 row)

SELECT pglinter.perform_table_check();
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [T003] WARNING: Found 3 tables with redundant indexes: public.customers_with_redundant_idx (indexes: customers_with_redundant_idx_email_key, idx_customers_email_1, idx_customers_email_2, idx_customers_name_1, idx_customers_name_2), public.orders_with_redundant_idx (indexes: idx_orders_customer_1, idx_orders_customer_2, idx_orders_date_status_1, idx_orders_date_status_2), public.products_with_redundant_idx (indexes: idx_products_category_active_1, idx_products_category_active_2, idx_products_sku_1, idx_products_sku_2)
NOTICE:  ==================================================
NOTICE:  üìä Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  üü° Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Test specific table information (if there are any helper functions for detailed output)
-- This should show the specific tables and their redundant indexes
SELECT 'Testing completed - T003 should have detected redundant indexes in:' AS status;
                               status                                
---------------------------------------------------------------------
 Testing completed - T003 should have detected redundant indexes in:
(1 row)

SELECT '- customers_with_redundant_idx: email indexes, name indexes' AS table_1;
                           table_1                           
-------------------------------------------------------------
 - customers_with_redundant_idx: email indexes, name indexes
(1 row)

SELECT '- products_with_redundant_idx: sku indexes, category+active indexes' AS table_2;
                               table_2                               
---------------------------------------------------------------------
 - products_with_redundant_idx: sku indexes, category+active indexes
(1 row)

SELECT '- orders_with_redundant_idx: customer_id indexes, date+status indexes' AS table_3;
                                table_3                                
-----------------------------------------------------------------------
 - orders_with_redundant_idx: customer_id indexes, date+status indexes
(1 row)

-- Clean up test tables
DROP TABLE IF EXISTS customers_with_redundant_idx CASCADE;
DROP TABLE IF EXISTS products_with_redundant_idx CASCADE;
DROP TABLE IF EXISTS orders_with_redundant_idx CASCADE;
ROLLBACK;

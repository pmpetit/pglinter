-- Simple example to demonstrate missing indexes and T004 rule detection
-- This script creates a table, generates data, performs queries that cause sequential scans,
-- and then shows how the T004 rule would detect this issue.
-- Clean up
DROP TABLE IF EXISTS user_activities CASCADE;
NOTICE:  table "user_activities" does not exist, skipping
-- Create a table without proper indexes (except primary key)
CREATE TABLE user_activities (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    activity_type VARCHAR(50) NOT NULL,
    description TEXT,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Insert a significant amount of test data
INSERT INTO user_activities (
    user_id, activity_type, description, ip_address
)
SELECT
    (RANDOM() * 1000 + 1)::INTEGER,  -- user_id between 1 and 1000
    CASE (RANDOM() * 4)::INTEGER
        WHEN 0 THEN 'login'
        WHEN 1 THEN 'logout'
        WHEN 2 THEN 'view_page'
        ELSE 'purchase'
    END AS activity_type,
    'Activity description ' || i AS description,
    ('192.168.1.' || (RANDOM() * 254 + 1)::INTEGER)::INET AS ip_address
FROM GENERATE_SERIES(1, 100000) AS i;
SELECT 'Performing queries that will cause sequential scans...' AS status;
                         status                         
--------------------------------------------------------
 Performing queries that will cause sequential scans...
(1 row)

-- Query 1: Find activities by user_id (no index on user_id)
SELECT 'Query 1: Finding activities for user_id = 500' AS query_info;
                  query_info                   
-----------------------------------------------
 Query 1: Finding activities for user_id = 500
(1 row)

DO $$
BEGIN
    FOR i IN 1..100 LOOP
        EXECUTE format('SELECT * FROM user_activities WHERE user_id = %s', i);
    END LOOP;
END$$;
-- Query 2: Find activities by activity_type (no index on activity_type)
SELECT 'Query 2: Finding activities for activity_type = ''login''' AS query_info;
                       query_info                        
---------------------------------------------------------
 Query 2: Finding activities for activity_type = 'login'
(1 row)

DO $$
DECLARE
    activity_types TEXT[] := ARRAY['login','logout','view_page','purchase'];
BEGIN
    FOR i IN 1..array_length(activity_types, 1) LOOP
        EXECUTE format('SELECT * FROM user_activities WHERE activity_type = ''%s''', activity_types[i]);
    END LOOP;
END$$;
SELECT COUNT(*) FROM user_activities
WHERE user_id = 500;
 count 
-------
    84
(1 row)

-- Query 2: Find activities by activity_type (no index on activity_type)
SELECT 'Query 2: Finding login activities' AS query_info;
            query_info             
-----------------------------------
 Query 2: Finding login activities
(1 row)

SELECT COUNT(*) FROM user_activities
WHERE activity_type = 'login';
 count 
-------
 12594
(1 row)

-- Query 4: Complex query combining multiple unindexed columns
SELECT 'Query 4: Finding user logins in last month' AS query_info;
                 query_info                 
--------------------------------------------
 Query 4: Finding user logins in last month
(1 row)

SELECT COUNT(*) FROM user_activities
WHERE
    user_id BETWEEN 100 AND 200
    AND activity_type = 'login';
 count 
-------
  1304
(1 row)

-- Query 5: Pattern matching on description (no index, will be very slow)
SELECT 'Query 5: Searching descriptions (this will be slow!)' AS query_info;
                      query_info                      
------------------------------------------------------
 Query 5: Searching descriptions (this will be slow!)
(1 row)

SELECT COUNT(*)
FROM user_activities
WHERE description LIKE '%Activity description 50%';
 count 
-------
  1111
(1 row)

-- Update statistics after the queries
ANALYZE user_activities;
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

DROP EXTENSION IF EXISTS pglinter CASCADE;
NOTICE:  extension "pglinter" does not exist, skipping
CREATE EXTENSION IF NOT EXISTS pglinter;
-- Disable all rules first
SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  üî¥ Disabled 22 rule(s)
 all_rules_disabled 
--------------------
                 22
(1 row)

-- enable T004
SELECT pglinter.enable_rule('T004') AS t004_reenabled;
NOTICE:  ‚úÖ Rule T004 has been enabled
 t004_reenabled 
----------------
 t
(1 row)

SELECT pglinter.perform_table_check(); -- Should include T004
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ùå [T004] ERROR: Found 1 table(s) with potential missing index (seq scan > threshold): 
public.user_activities table with potential missing index, seq scan exceed the error threshold: 100. 

NOTICE:  ==================================================
NOTICE:  üìä Summary: 1 error(s), 0 warning(s), 0 info
NOTICE:  üî¥ Critical issues found - please review and fix errors
 perform_table_check 
---------------------
 t
(1 row)

DROP TABLE IF EXISTS user_activities CASCADE;
-- Create a table without proper indexes (except primary key)
CREATE TABLE indexed_user_activities (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    activity_type VARCHAR(50) NOT NULL,
    description TEXT,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Insert a significant amount of test data
INSERT INTO indexed_user_activities (
    user_id, activity_type, description, ip_address
)
SELECT
    (RANDOM() * 1000 + 1)::INTEGER,  -- user_id between 1 and 1000
    CASE (RANDOM() * 4)::INTEGER
        WHEN 0 THEN 'login'
        WHEN 1 THEN 'logout'
        WHEN 2 THEN 'view_page'
        ELSE 'purchase'
    END AS activity_type,
    'Activity description ' || i AS description,
    ('192.168.1.' || (RANDOM() * 254 + 1)::INTEGER)::INET AS ip_address
FROM GENERATE_SERIES(1, 100000) AS i;
-- Now let's add the missing indexes
SELECT 'Adding missing indexes to improve performance...' AS status;
                      status                      
--------------------------------------------------
 Adding missing indexes to improve performance...
(1 row)

CREATE INDEX idx_user_activities_user_id ON indexed_user_activities (user_id);
CREATE INDEX idx_user_activities_activity_type ON indexed_user_activities (
    activity_type
);
CREATE INDEX idx_user_activities_user_activity ON indexed_user_activities (
    user_id, activity_type
);
ANALYZE indexed_user_activities;
SELECT 'Running the same queries again with indexes...' AS status;
                     status                     
------------------------------------------------
 Running the same queries again with indexes...
(1 row)

-- Query 1: Find activities by user_id (no index on user_id)
SELECT 'Query 1: Finding activities for user_id = 500' AS query_info;
                  query_info                   
-----------------------------------------------
 Query 1: Finding activities for user_id = 500
(1 row)

DO $$
BEGIN
    FOR i IN 1..100 LOOP
        EXECUTE format('SELECT * FROM indexed_user_activities WHERE user_id = %s', i);
    END LOOP;
END$$;
-- Query 2: Find activities by activity_type (no index on activity_type)
SELECT 'Query 2: Finding activities for activity_type = ''login''' AS query_info;
                       query_info                        
---------------------------------------------------------
 Query 2: Finding activities for activity_type = 'login'
(1 row)

DO $$
DECLARE
    activity_types TEXT[] := ARRAY['login','logout','view_page','purchase'];
BEGIN
    FOR i IN 1..array_length(activity_types, 1) LOOP
        EXECUTE format('SELECT * FROM indexed_user_activities WHERE activity_type = ''%s''', activity_types[i]);
    END LOOP;
END$$;
SELECT COUNT(*) FROM indexed_user_activities
WHERE user_id = 500;
 count 
-------
    88
(1 row)

-- Query 2: Find activities by activity_type (no index on activity_type)
SELECT 'Query 2: Finding login activities' AS query_info;
            query_info             
-----------------------------------
 Query 2: Finding login activities
(1 row)

SELECT COUNT(*) FROM indexed_user_activities
WHERE activity_type = 'login';
 count 
-------
 12562
(1 row)

-- Query 3: Find activities by date range (no index on activity_date)
SELECT 'Query 3: Finding recent activities' AS query_info;
             query_info             
------------------------------------
 Query 3: Finding recent activities
(1 row)

SELECT COUNT(*)
FROM indexed_user_activities
WHERE activity_type = 'login';
 count 
-------
 12562
(1 row)

-- Query 4: Complex query combining multiple unindexed columns
SELECT 'Query 4: Finding user logins in last month' AS query_info;
                 query_info                 
--------------------------------------------
 Query 4: Finding user logins in last month
(1 row)

SELECT COUNT(*) FROM indexed_user_activities
WHERE
    user_id BETWEEN 100 AND 200
    AND activity_type = 'login';
 count 
-------
  1335
(1 row)

-- Update statistics after the queries
ANALYZE indexed_user_activities;
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- Disable all rules first
SELECT pglinter.disable_all_rules() AS all_rules_disabled;
NOTICE:  üî¥ Disabled 1 rule(s)
 all_rules_disabled 
--------------------
                  1
(1 row)

-- Run table check to detect high sequential scan usage
SELECT pglinter.perform_table_check();
NOTICE:  ‚úÖ No issues found - database schema looks good!
 perform_table_check 
---------------------
 t
(1 row)

-- Test rule management for T004
SELECT pglinter.explain_rule('T004');
NOTICE:  üìñ Rule Explanation for T004
============================================================

üéØ Rule Name: TableWithPotentialMissingIdx
üìã Scope: TABLE

üìù Description:
 with high level of seq scan, base on pg_stat_user_tables.

‚ö†Ô∏è  Message Template:
{schema}.{table} table with potential missing index, seq scan exceed the {log_level} threshold: {seq_scan_percentage}.

üîß How to Fix:
   1. ask a dba
============================================================
 explain_rule 
--------------
 t
(1 row)

SELECT pglinter.is_rule_enabled('T004') AS t004_enabled;
 t004_enabled 
--------------
 f
(1 row)

-- enable T004
SELECT pglinter.enable_rule('T004') AS t004_reenabled;
NOTICE:  ‚úÖ Rule T004 has been enabled
 t004_reenabled 
----------------
 t
(1 row)

SELECT pglinter.perform_table_check(); -- Should include T004
NOTICE:  üîç pglinter found 1 issue(s):
NOTICE:  ==================================================
NOTICE:  ‚ö†Ô∏è  [T004] WARNING: Found 1 table(s) with potential missing index (seq scan > threshold): 
public.indexed_user_activities table with potential missing index, seq scan exceed the warning threshold: 69. 

NOTICE:  ==================================================
NOTICE:  üìä Summary: 0 error(s), 1 warning(s), 0 info
NOTICE:  üü° Some warnings found - consider reviewing for optimization
 perform_table_check 
---------------------
 t
(1 row)

-- Cleanup
DROP TABLE IF EXISTS indexed_user_activities CASCADE;
